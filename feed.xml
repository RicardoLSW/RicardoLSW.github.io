<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-04-08T06:28:21+00:00</updated><id>/feed.xml</id><title type="html">让我留在你身边</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>Ricardo</name></author><entry><title type="html">清明假期重庆游</title><link href="/%E6%97%85%E6%B8%B8/%E9%87%8D%E5%BA%86/" rel="alternate" type="text/html" title="清明假期重庆游" /><published>2024-04-08T00:00:00+00:00</published><updated>2024-04-08T13:05:37+00:00</updated><id>/%E6%97%85%E6%B8%B8/%E9%87%8D%E5%BA%86</id><content type="html" xml:base="/%E6%97%85%E6%B8%B8/%E9%87%8D%E5%BA%86/"><![CDATA[<p><img src="https://figure-b.ricardolsw.com/image/21FD71AB-FE17-4800-B73E-B16E45A2618E.jpeg" alt="" />
<img src="https://figure-b.ricardolsw.com/image/5ED055EF-49A0-404A-AB85-8E58547097C5.jpeg" alt="" />
<img src="https://figure-b.ricardolsw.com/image/DD14E387-57DF-4404-AE38-B4FFE904133D.jpeg" alt="" />
<img src="https://figure-b.ricardolsw.com/image/072D8753-BE42-4AD3-9C29-452377942281.jpeg" alt="" />
<img src="https://figure-b.ricardolsw.com/image/C8054C9E-80BD-4888-8B8B-C5E2E2CC7375.jpeg" alt="" />
<img src="https://figure-b.ricardolsw.com/image/3183097C-4737-41C0-87A0-E282BE2BF506.jpeg" alt="" />
<img src="https://figure-b.ricardolsw.com/image/00FB9A77-BC42-49FB-B329-2C73F0D71E4B.jpeg" alt="" />
<img src="https://figure-b.ricardolsw.com/image/94699EA0-4248-428F-B737-BC25A7C5B6A9.jpeg" alt="" />
<img src="https://figure-b.ricardolsw.com/image/EC4D5D37-FE77-4E36-B26C-70CA31335478.jpeg" alt="" />
<img src="https://figure-b.ricardolsw.com/image/BB74F600-0CC0-414D-9602-08FDD15CC2F2.jpeg" alt="" /></p>]]></content><author><name>Ricardo</name></author><category term="旅游" /><category term="摄影" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">gitflow流程示例</title><link href="/%E5%B7%A5%E5%85%B7/gitflow%E6%B5%81%E7%A8%8B%E7%A4%BA%E4%BE%8B/" rel="alternate" type="text/html" title="gitflow流程示例" /><published>2021-07-19T00:00:00+00:00</published><updated>2021-07-19T14:36:16+00:00</updated><id>/%E5%B7%A5%E5%85%B7/gitflow%E6%B5%81%E7%A8%8B%E7%A4%BA%E4%BE%8B</id><content type="html" xml:base="/%E5%B7%A5%E5%85%B7/gitflow%E6%B5%81%E7%A8%8B%E7%A4%BA%E4%BE%8B/"><![CDATA[<h3 id="分支管理">分支管理</h3>

<h3 id="分支命名">分支命名</h3>

<h4 id="master-分支">master 分支</h4>

<ul>
  <li>master 分支为主分支，用于部署生产环境，需要确保master分支的稳定性。</li>
  <li>此分支属于只读分支，只能从 release 分支合并过来，任何时候都不能在此分支修改代码。</li>
  <li>所有向master分支的推送，都要打上tag标签记录，方便追溯。</li>
  <li>此分支只能前进，不能有回退操作。</li>
</ul>

<h4 id="hotfix-分支">hotfix/* 分支</h4>

<ul>
  <li>生产环境 bug 修复分支，基于 master 分支检出。</li>
  <li>属于临时分支，当生产环境出现 bug ，管理员基于 tag 创建 hotfix/<bug名字> 分支、 release/<版本号> 分支，由开发人员在hotfix分支修复bug，修复完成后，并且在开发集成环境自测通过、单元测试通过、Sona扫描通过后，再向 release 分支提交 pull request 申请。bug修复完成上线之后可删除此分支。</版本号></bug名字></li>
</ul>

<h4 id="release-分支">release/* 分支</h4>

<ul>
  <li>release 分支为预上线分支，基于 develop 或 master 分支检出。用于准备发布新阶段版本或者修复线上bug版本。</li>
  <li>此分支用于上线前bug测试，文档生成和其他面向发布任务。</li>
  <li>此分支属于只读分支，只能由 master 分支或者 develop 分支检出，或者从 bugfix 分支、hotfix 分支合并过来，任何时候都不能在此分支修改代码。</li>
  <li>此分支属于临时分支，在发布提测阶段，会以 release 分支代码为基准提测。当 release 分支测试验证通过后，最终会先被合并到 master 分支（发布新版本或者修复线上bug，要打tag标签），再被合并到 develop 分支（使其与 master 分支保持一致），最后删除此分支。</li>
  <li>命名：release/<版本号>（例：release/1.0.0）</版本号></li>
</ul>

<h4 id="bugfix-分支">bugfix/* 分支</h4>

<ul>
  <li>预上线 bug 修复分支，基于 release 分支检出。</li>
  <li>此分支用于上线前bug修复。</li>
  <li>此分支属于临时分支，当提测阶段中存在 bug 需要修复，由开发人员基于 release 分支创建 bugfix/<bug名字> 分支，然后在 bugfix/<bug名字> 分支进行修复 bug 。 bug 修复完成后，并且在开发集成环境自测通过、单元测试通过、Sona扫描通过后，再向 release 分支提交 pull request 申请。bug修复完成 release 分支测试通过之后可删除此分支。</bug名字></bug名字></li>
</ul>

<h4 id="develop-分支">develop 分支</h4>

<ul>
  <li>develop 为开发环境主干分支，基于 master 分支检出。</li>
  <li>此分支为只读分支，只能从master、release、feature分支合并过来，任何时候都不能在此分支修改代码。</li>
  <li>此分支只能由开发人员提交 pull request（需要 code review），或者由管理员 merge release 分支。</li>
  <li>在一个 release 分支没有创建出来时，develop 分支不能合并不包含 release 功能范围的  feature 分支。develop 分支在特殊情况下可以回退版本。</li>
</ul>

<h4 id="feature-分支">feature/* 分支</h4>

<ul>
  <li>feature 分支为功能开发分支，由开发人员基于 develop 分支创建 feature/<功能模块> 分支。</功能模块></li>
  <li>此分支用于新功能开发，一个 feature 分支最大粒度只能到模块。</li>
  <li>此分支为临时分支，最终会被合并到 develop 分支（新增功能），或者删除（放弃功能）。</li>
  <li>此分支通常仅存在于开发人员本地存储库中，而不存在与远程origin。</li>
  <li>一个新功能开发完成后，且在开发集成环境自测通过、单元测试通过、Sona扫描通过后，才能向 develop 分支提交 pull request （需要 code review）。</li>
</ul>

<h2 id="git版本号">git版本号</h2>

<p>git采用的是三位不版本号：主版本号.次版本号.修订号</p>

<ul>
  <li>主版本号：做了一些不兼容的API修改，可以理解为一个大的产品更新。</li>
  <li>次版本号：新增了一些功能，可以理解为合并了一个feature。</li>
  <li>修订号：修复了一些bug，可以理解为合并了一个hotfix。</li>
</ul>

<p>同样版本号后面也可以版本名称，例如：v1.0.0-beta.1</p>

<table>
  <thead>
    <tr>
      <th>版本名称</th>
      <th>介绍</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>alpha</td>
      <td>内测版</td>
      <td>内部测试版本</td>
    </tr>
    <tr>
      <td>beta</td>
      <td>公测版</td>
      <td>Beta阶段会一直加入新的功能</td>
    </tr>
    <tr>
      <td>RC</td>
      <td>候选版</td>
      <td>几乎就不会加入新的功能了，而主要着重于除错</td>
    </tr>
    <tr>
      <td>Release</td>
      <td>正式版</td>
      <td>稳定版本</td>
    </tr>
  </tbody>
</table>

<h2 id="规范commit信息">规范Commit信息</h2>

<p>当我们的代码库由很多人维护时，经常会出现代码风格不一致或者代码质量不过关，提交信息紊乱的情况，当然啦，即使是一个人的代码库，有的时候，自己写代码时不太注意细节，也会出现风格不一致的情况。</p>

<p>首先，看下 <code class="language-plaintext highlighter-rouge">vue-next</code> 的代码库的 <code class="language-plaintext highlighter-rouge">commit</code> 记录，如图：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901104716121.png" alt="image-20200901104716121" /></p>

<p>它的基本格式如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;类型&gt;[可选的作用域]: &lt;描述&gt;

[可选的正文]

[可选的脚注]
</code></pre></div></div>

<p>安装<code class="language-plaintext highlighter-rouge">commitizen</code>、<code class="language-plaintext highlighter-rouge">cz-conventional-changelog</code>需要node环境，全局安装：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> commitizen cz-conventional-changelog
<span class="nb">echo</span> <span class="s1">'{ "path": "cz-conventional-changelog" }'</span> <span class="o">&gt;</span> ~/.czrc
</code></pre></div></div>

<blockquote>
  <p>安装完毕后，可直接使用<code class="language-plaintext highlighter-rouge">git cz</code>来取代<code class="language-plaintext highlighter-rouge">git commit</code>。</p>

  <p>全局模式下，需要 <code class="language-plaintext highlighter-rouge">~/.czrc</code> 配置文件, 为<code class="language-plaintext highlighter-rouge">commitizen</code>指定<code class="language-plaintext highlighter-rouge">Adapter</code>。</p>
</blockquote>

<p>此刻开始，请使用 <code class="language-plaintext highlighter-rouge">git cz</code> 来替代 <code class="language-plaintext highlighter-rouge">git commit</code> 提交信息，使用 <code class="language-plaintext highlighter-rouge">git cz</code> 来进行填写 <code class="language-plaintext highlighter-rouge">commit</code> 的内容，根据提示依次填写：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.Select the type of change that you're committing 选择改动类型 (&lt;type&gt;)

2.What is the scope of this change (e.g. component or file name)? 填写改动范围 (&lt;scope&gt;)

3.Write a short, imperative tense description of the change: 写一个精简的描述 (&lt;subject&gt;)

4.Provide a longer description of the change: (press enter to skip) 对于改动写一段长描述 (&lt;body&gt;)

5.Are there any breaking changes? (y/n) 是破坏性修改吗？默认n (&lt;footer&gt;)

6.Does this change affect any openreve issues? (y/n) 改动修复了哪个问题？默认n (&lt;footer&gt;)
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">git cz</code> 的 <code class="language-plaintext highlighter-rouge">type</code> 说明：</p>

<table>
  <thead>
    <tr>
      <th>值</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>feat</td>
      <td>新增一个功能</td>
    </tr>
    <tr>
      <td>fix</td>
      <td>修复一个bug</td>
    </tr>
    <tr>
      <td>docs</td>
      <td>文档变更</td>
    </tr>
    <tr>
      <td>style</td>
      <td>代码格式（不影响功能，例如空格、分号等格式修正）</td>
    </tr>
    <tr>
      <td>refactor</td>
      <td>代码重构</td>
    </tr>
    <tr>
      <td>perf</td>
      <td>改善性能</td>
    </tr>
    <tr>
      <td>test</td>
      <td>测试</td>
    </tr>
    <tr>
      <td>build</td>
      <td>变更项目构建或外部依赖（例如scopes: webpack、gulp、npm等）</td>
    </tr>
    <tr>
      <td>ci</td>
      <td>更改持续集成软件的配置文件和package中的script命令，例如scopes: Travis、Circle等</td>
    </tr>
    <tr>
      <td>chore</td>
      <td>变更构建流程或辅助工具</td>
    </tr>
    <tr>
      <td>revert</td>
      <td>代码回退</td>
    </tr>
  </tbody>
</table>

<p>此时，我们现在已经可以规范提交信息了。</p>

<h2 id="创建仓库创建项目">创建仓库、创建项目</h2>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901103931941.png" alt="image-20200901103931941" /></p>

<p>前端项目搭建过程这里不再叙述</p>

<h2 id="前端通过配置git-hooks来规范commit信息">前端通过配置git hooks来规范Commit信息</h2>

<h3 id="安装以下依赖">安装以下依赖</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-D</span> @commitlint/cli @commitlint/config-conventional husky
</code></pre></div></div>

<h3 id="在packagejson中新增以下字段">在package.json中新增以下字段</h3>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"husky"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"hooks"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"commit-msg"</span><span class="p">:</span><span class="w"> </span><span class="s2">"commitlint -E HUSKY_GIT_PARAMS"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">husky</code> 是 <code class="language-plaintext highlighter-rouge">git hook</code> 工具，使用 <code class="language-plaintext highlighter-rouge">husky</code>，我们可以方便的在 <code class="language-plaintext highlighter-rouge">package.json</code> 中配置 <code class="language-plaintext highlighter-rouge">git hook</code> 脚本，例如: <code class="language-plaintext highlighter-rouge">pre-commit</code>、 <code class="language-plaintext highlighter-rouge">pre-push</code>、 <code class="language-plaintext highlighter-rouge">commit-msg</code> 等的。</p>

<h3 id="创建-commitlintconfigjs-文件">创建 commitlint.config.js 文件</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">extends</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">@commitlint/config-conventional</span><span class="dl">"</span><span class="p">],</span>
<span class="p">};</span>
</code></pre></div></div>

<p>我们来看看，假设我们随便写一个 <code class="language-plaintext highlighter-rouge">git commit -m 'fixbug'</code> 会提示什么？</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901105602290.png" alt="image-20200901105602290" /></p>

<p>我们可以看到，这样的commit message是不合规范的，被拒绝提交，使用<code class="language-plaintext highlighter-rouge">git cz</code>或者<code class="language-plaintext highlighter-rouge">git commit</code>填写出上面规范的commit message才允许被提交，这里我们推荐使用<code class="language-plaintext highlighter-rouge">git cz</code></p>

<p>虽然，我们现在已经可以规范提交信息了，但是我们可能不喜欢默认的交互，例如，一个精简的描述就可以了，不希望再提示我去写详细的描述，那么就可以使用 <code class="language-plaintext highlighter-rouge">cz-customizable</code> 来进行定制。</p>

<h3 id="自定义提交说明">自定义提交说明</h3>

<h4 id="安装cz-customizable">安装cz-customizable</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install </span>cz-customizable <span class="nt">-D</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">cz-customizable</code> 是可自定义的 <code class="language-plaintext highlighter-rouge">Commitizen</code> 插件，可帮助实现一致的 <code class="language-plaintext highlighter-rouge">commit message</code>。</p>

<p><code class="language-plaintext highlighter-rouge">cz-customizable</code> 适合大型团队去自定义 <code class="language-plaintext highlighter-rouge">scope</code>，和 <code class="language-plaintext highlighter-rouge">commit type</code>。</p>

<h4 id="新建-cz-configjs">新建 .cz-config.js</h4>

<p>在项目根目录下创建 <code class="language-plaintext highlighter-rouge">.cz-config.js</code> 文件：</p>

<p>以下为官方示例</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//.cz-config.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">types</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">feat</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">feat:     A new feature</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">fix</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">fix:      A bug fix</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">docs</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">docs:     Documentation only changes</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">style</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span>
        <span class="dl">'</span><span class="s1">style:    Changes that do not affect the meaning of the code</span><span class="se">\n</span><span class="s1">            (white-space, formatting, missing semi-colons, etc)</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">refactor</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">refactor: A code change that neither fixes a bug nor adds a feature</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">perf</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">perf:     A code change that improves performance</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">test:     Adding missing tests</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">chore</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span>
        <span class="dl">'</span><span class="s1">chore:    Changes to the build process or auxiliary tools</span><span class="se">\n</span><span class="s1">            and libraries such as documentation generation</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">revert</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">revert:   Revert to a commit</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">WIP</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">WIP:      Work in progress</span><span class="dl">'</span> <span class="p">}</span>
  <span class="p">],</span>

  <span class="na">scopes</span><span class="p">:</span> <span class="p">[{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">accounts</span><span class="dl">'</span> <span class="p">},</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span> <span class="p">},</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">exampleScope</span><span class="dl">'</span> <span class="p">},</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">changeMe</span><span class="dl">'</span> <span class="p">}],</span>

  <span class="na">allowTicketNumber</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="na">isTicketNumberRequired</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="na">ticketNumberPrefix</span><span class="p">:</span> <span class="dl">'</span><span class="s1">TICKET-</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">ticketNumberRegExp</span><span class="p">:</span> <span class="dl">'</span><span class="se">\\</span><span class="s1">d{1,5}</span><span class="dl">'</span><span class="p">,</span>

  <span class="c1">// it needs to match the value for field type. Eg.: 'fix'</span>
  <span class="cm">/*
  scopeOverrides: {
    fix: [
      {name: 'merge'},
      {name: 'style'},
      {name: 'e2eTest'},
      {name: 'unitTest'}
    ]
  },
  */</span>
  <span class="c1">// override the messages, defaults are as follows</span>
  <span class="na">messages</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Select the type of change that you're committing:</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">scope</span><span class="p">:</span> <span class="dl">'</span><span class="se">\n</span><span class="s1">Denote the SCOPE of this change (optional):</span><span class="dl">'</span><span class="p">,</span>
    <span class="c1">// used if allowCustomScopes is true</span>
    <span class="na">customScope</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Denote the SCOPE of this change:</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">subject</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Write a SHORT, IMPERATIVE tense description of the change:</span><span class="se">\n</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">body</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Provide a LONGER description of the change (optional). Use "|" to break new line:</span><span class="se">\n</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">breaking</span><span class="p">:</span> <span class="dl">'</span><span class="s1">List any BREAKING CHANGES (optional):</span><span class="se">\n</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">footer</span><span class="p">:</span> <span class="dl">'</span><span class="s1">List any ISSUES CLOSED by this change (optional). E.g.: #31, #34:</span><span class="se">\n</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">confirmCommit</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Are you sure you want to proceed with the commit above?</span><span class="dl">'</span>
  <span class="p">},</span>

  <span class="na">allowCustomScopes</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">allowBreakingChanges</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">feat</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fix</span><span class="dl">'</span><span class="p">],</span>
  <span class="c1">// skip any questions you want</span>
  <span class="na">skipQuestions</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">body</span><span class="dl">'</span><span class="p">],</span>

  <span class="c1">// limit subject length</span>
  <span class="na">subjectLimit</span><span class="p">:</span> <span class="mi">100</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>types: 描述修改的性质是什么，是bugfix还是feat，在这里进行定义。</li>
  <li>scopes: 定义之后，我们就可以通过上下键去选择 <code class="language-plaintext highlighter-rouge">scope</code></li>
  <li>scopeOverrides: 针对每一个type去定义scope</li>
  <li>allowBreakingChanges: 如上设置为 <code class="language-plaintext highlighter-rouge">['feat', 'fix']</code>，只有我们type选择了 <code class="language-plaintext highlighter-rouge">feat</code> 或者是 <code class="language-plaintext highlighter-rouge">fix</code>，才会询问我们 breaking message.</li>
  <li>allowCustomScopes: 设置为 true，在 scope 选择的时候，会有 <code class="language-plaintext highlighter-rouge">empty</code> 和 <code class="language-plaintext highlighter-rouge">custom</code> 可以选择，顾名思义，选择 <code class="language-plaintext highlighter-rouge">empty</code> 表示 <code class="language-plaintext highlighter-rouge">scope</code> 缺省，如果选择 <code class="language-plaintext highlighter-rouge">custom</code>，则可以自己输入信息</li>
  <li>skipQuestions: 指定跳过哪些步骤，例如跳过我们刚刚说的详细描述，设置其为 <code class="language-plaintext highlighter-rouge">scope: ['body']</code>，假设我们的项目也不会涉及到关联 issue，我们可以设置其为 <code class="language-plaintext highlighter-rouge">scope: ['body', 'footer']</code></li>
  <li>subjectLimit: 描述的长度限制</li>
</ul>

<p>这里我就不一一演示每个字段修改之后的情况了，根据字段的说明，建议如果想自定义提交规则，在本地进行修改验证，公司内部的代码库不需要管理 <code class="language-plaintext highlighter-rouge">issue</code>，另外，我不喜欢写长描述，所以我把 <code class="language-plaintext highlighter-rouge">body</code> 和 <code class="language-plaintext highlighter-rouge">footer</code> 给 <code class="language-plaintext highlighter-rouge">skip</code> 掉了。</p>

<h3 id="代码提交前检查">代码提交前检查</h3>

<p>现在，我们已经规范了 <code class="language-plaintext highlighter-rouge">commit</code> 信息，但是没有对提交的代码进行规范，在一个代码库中，经常出现2个空格/4个空格混用，有些地方写 <code class="language-plaintext highlighter-rouge">;</code>，有些不写 <code class="language-plaintext highlighter-rouge">;</code>，风格不统一。例如，我们希望提交到git库的代码，都能够通过 <code class="language-plaintext highlighter-rouge">eslint</code> 检查或者是通过测试。我们可以借助于 <code class="language-plaintext highlighter-rouge">pre-commit</code> 这个钩子来做这些事情。</p>

<h4 id="安装依赖">安装依赖</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install </span>lint-staged <span class="nt">-D</span>
</code></pre></div></div>

<h4 id="修改packagejson使用pre-commit-的-hook">修改package.json使用pre-commit 的 hook</h4>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"husky"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"hooks"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"commit-msg"</span><span class="p">:</span><span class="w"> </span><span class="s2">"commitlint -E HUSKY_GIT_PARAMS"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"pre-commit"</span><span class="p">:</span><span class="w"> </span><span class="s2">"lint-staged"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="nl">"lint-staged"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"*.{vue,js}"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"vue-cli-service lint"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"prettier --write"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"git add"</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div>

<p>这样配置之后，每次提交的时候，都会对要提交的文件（并不是对整个项目）进行 <code class="language-plaintext highlighter-rouge">prettier</code> 格式化和 <code class="language-plaintext highlighter-rouge">lint</code> 检查，都通过之后，才能 <code class="language-plaintext highlighter-rouge">commit</code> 成功。</p>

<h2 id="一切准备就绪将工程提交至github">一切准备就绪，将工程提交至github</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git cz
git push origin master
</code></pre></div></div>

<p>我们看下git log</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901113008281.png" alt="image-20200901113008281" /></p>

<h2 id="创建develop分支">创建develop分支</h2>

<p>基于origin/master分支创建develop分支</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git fetch origin master:develop
</code></pre></div></div>

<p>切换到develop分支</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout develop
</code></pre></div></div>

<p>将develop分支推送到远程仓库</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin develop
</code></pre></div></div>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901115919843.png" alt="image-20200901115919843" /></p>

<h2 id="受保护的分支">受保护的分支</h2>

<p>我们可以看下下图：</p>

<p><img src="https://figure-b.ricardolsw.com/image/watermark.png" alt="gitflow" /></p>

<p>可以看到master、develop、release分支权限为Owner，开发者不能直接向这三个分支提交代码，而是需要提交一个pull request，通过code review之后才能被允许合并到该分支。</p>

<p>所以这三个分支是受保护的，在github项目仓库中找到Settings-Branches。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901124704992.png" alt="image-20200901124704992" /></p>

<p>把该勾的都勾上，然后保存更改，develop分支同理。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901124734816.png" alt="image-20200901124734816" /></p>

<p>这时候我们可以看到，这两个分支是受保护的。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901124833357.png" alt="image-20200901124833357" /></p>

<h2 id="开发一个新功能feature分支">开发一个新功能：feature分支</h2>

<p>创建一个新功能分支：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git fetch origin develop:feature/hello-world
</code></pre></div></div>

<blockquote>
  <p>基于远程develop分支创建功能模块为hello-world的feature分支。</p>
</blockquote>

<p>切换到新分支：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout feature/hello-world
</code></pre></div></div>

<p>接下来我们就可以在该分支下进行开发新功能了。</p>

<p>例如我在Home.vue新增了一行代码：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901125809866.png" alt="image-20200901125809866" /></p>

<p>功能开发完成后，我们需要把该分支提交推送到远程仓库：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git cz
git push origin feature/hello-world
</code></pre></div></div>

<h2 id="提交一个pull-request">提交一个pull request</h2>

<p>我们新功能开发完成并且提交到远程仓库之后，需要合并到develop分支，但是上面讲到master、develop、release分支是后保护的，是禁止直接提交、合并代码的。所以我们需要提交一个pull request，通过code review之后才能经管理员合并至对应分支。</p>

<p>在页面点击New pull request来创建一个pull request：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901130415707.png" alt="image-20200901130415707" /></p>

<p>选择将feature/hello-world合并到develop：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901130505508.png" alt="image-20200901130505508" /></p>

<p>选择Reviewers代码审核人员：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901130823945.png" alt="image-20200901130823945" /></p>

<p>选择Assignees处理人：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901130951460.png" alt="image-20200901130951460" /></p>

<p>最后点击Create pull request提交即可。</p>

<p>然后我们可以在上面的Pull requests选项看到所有的pull request：</p>

<p><img src="https://figure-b.ricardolsw.com/image/fehelper-github-smec-cn-com-nbs35-gitflow-demo-pull-2-1598937094197.png" alt="fehelper-github-smec-cn-com-nbs35-gitflow-demo-pull-2-1598937094197" /></p>

<p>可以看到，在Reviewers下面人员右侧有一个小黄点，说明该pull request需要该人员进行代码审核，当审核通过之后，我们就可以合并pull request了（Merge pull request）。</p>

<p>审核人员视角：</p>

<p>通过Pull requests选项卡，打开一个pull request，选择Files changed选项就可以看到提交者所有的代码改动，然后点击Review changes按钮进行审批操作，这里我们选择通过Approve，点击Submit review提交。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901131623367.png" alt="image-20200901131623367" /></p>

<p>当所有审核都通过了，管理就可以进行合并操作了。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901132613075.png" alt="image-20200901132613075" /></p>

<p>我们可以看到develop的提交记录：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901132716926.png" alt="image-20200901132716926" /></p>

<p>合并成功之后我们就可以删除feature/hello-world分支了。</p>

<h2 id="预发布分支release">预发布分支：release</h2>

<p>当一期所有功能开发完成后，就需要准备发布上线了，在上线之前我们会有一个测试版本，用于上线前的集成测试，所以我们需要基于预上线版本创建一个release分支，例如我们要发布1.0.0版本，就需要基于develop分支创建一个release/v1.0.0分支。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git fetch origin develop:release/v1.0.0
</code></pre></div></div>

<p>切换到release分支并提交到远程：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout release/v1.0.0
git push origin release/v1.0.0
</code></pre></div></div>

<p>同样，我们也要把release分支开启保护，禁止开发人员向其提交代码。</p>

<h2 id="bugfix分支">bugfix分支</h2>

<p>当release分支测试出现bug，由管理员基于release分支创建bugfix/<bug名称>分支，然后分配相应的开发人员进行修复。</bug名称></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git fetch origin release/v1.0.0:bugfix/fix-hello-world
git checkout bugfix/fix-hello-world
git push origin bugfix/fix-hello-world
</code></pre></div></div>

<p>当bug修复完成后，同样也需要提交一个pull request合并到release分支，这个过程参考上面的feature分支提交pull request。</p>

<h2 id="发布上线打tag">发布上线打tag</h2>

<p>当所有功能开发完成，release分支功能测试通过，达到上线要求就可以发布上线了，这时候我们需要把release分支合并到master分支，也是同样提交一个pull request。</p>

<p>每一次向master合并的代码，都要打上tag，方便追溯：</p>

<p>点击release选项：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901141330066.png" alt="image-20200901141330066" /></p>

<p>创建一个release，如果是移动端，我们还需要上传该版本的安装包：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901141354210.png" alt="image-20200901141354210" /></p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901141504968.png" alt="image-20200901141504968" /></p>

<p>最后点击Publish release即可。可以看到github也同步帮我们创建了tag：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901141612609.png" alt="" /></p>

<h2 id="hotfix分支">hotfix分支</h2>

<p>原理同bugfix分支，只不过他是用于修复线上版本出现的bug，需要基于出现问题的tag来创建hotfix分支和release分支，当bug修复之后，同样pull request到release分支进行测试。</p>

<h2 id="所有masterrelease分支的更新管理员都要同步更新到develop分支上同时开发人员每次在开发前都需要从develop拉取最新的代码">所有master、release分支的更新，管理员都要同步更新到develop分支上，同时开发人员每次在开发前，都需要从develop拉取最新的代码。</h2>

<h2 id="cicd">CI/CD</h2>

<p>流水线基于tag来构建，当我在github创建一个tag的时候就会触发流水线：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901144652231.png" alt="image-20200901144652231" /></p>

<p>构建出来的版本命名也很容易让人理解：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200901144742469.png" alt="image-20200901144742469" /></p>]]></content><author><name>Ricardo</name></author><category term="工具" /><category term="git" /><summary type="html"><![CDATA[分支管理]]></summary></entry><entry><title type="html">番外篇：自动部署（GitHub Actions）</title><link href="/%E5%B7%A5%E5%85%B7/%E7%95%AA%E5%A4%96%E7%AF%87-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-GitHub-Actions/" rel="alternate" type="text/html" title="番外篇：自动部署（GitHub Actions）" /><published>2021-04-25T00:00:00+00:00</published><updated>2021-04-25T13:57:49+00:00</updated><id>/%E5%B7%A5%E5%85%B7/%E7%95%AA%E5%A4%96%E7%AF%87%EF%BC%9A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%EF%BC%88GitHub-Actions%EF%BC%89</id><content type="html" xml:base="/%E5%B7%A5%E5%85%B7/%E7%95%AA%E5%A4%96%E7%AF%87-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-GitHub-Actions/"><![CDATA[]]></content><author><name>Ricardo</name></author><category term="工具" /><category term="CI/CD" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Vue3前传：创建工程时必须要做的事</title><link href="/vue/Vue3%E5%89%8D%E4%BC%A0-%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B%E6%97%B6%E5%BF%85%E9%A1%BB%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B/" rel="alternate" type="text/html" title="Vue3前传：创建工程时必须要做的事" /><published>2021-04-24T00:00:00+00:00</published><updated>2021-04-24T14:51:17+00:00</updated><id>/vue/Vue3%E5%89%8D%E4%BC%A0%EF%BC%9A%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B%E6%97%B6%E5%BF%85%E9%A1%BB%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B</id><content type="html" xml:base="/vue/Vue3%E5%89%8D%E4%BC%A0-%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B%E6%97%B6%E5%BF%85%E9%A1%BB%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B/"><![CDATA[<h2 id="前言">前言</h2>

<p>Vue3 跟 Vite 正式版发布有很长一段时间了，可我到现在Vue2都还没整明白，学不动了呀，Angular和React也都快忘完了。但该学还是要学，今天再开个专栏，记录下学习Vue3的过程。</p>

<p>言归正传，这篇主要讲怎么搭建一套规范的前端工程，这篇内容不限于Vue3，同样也适用Vue2等其他前端工程。篇幅较长，先列一下目录：</p>

<ul>
  <li><a href="#title1">项目搭建</a></li>
  <li><a href="#title2">代码规范</a></li>
  <li><a href="#title3">提交规范</a></li>
  <li><a href="#title4">单元测试</a></li>
  <li>番外：自动部署（Github Actions）</li>
</ul>

<h2 id="项目地址">项目地址</h2>

<p>github：<a href="https://github.com/RicardoLSW/vue-basic">https://github.com/RicardoLSW/vue-basic</a></p>

<h2 id="技术栈">技术栈</h2>

<ul>
  <li>前端框架：<a href="https://v3.cn.vuejs.org/guide/introduction.html">Vue 3</a></li>
  <li>构建工具：<a href="https://cn.vitejs.dev/guide/">Vite 2</a></li>
  <li>路由：<a href="https://next.router.vuejs.org/zh/introduction.html">Vue Router 4</a></li>
  <li>状态管理：<a href="https://next.vuex.vuejs.org/">Vuex 4</a></li>
  <li>HTTP：<a href="https://github.com/axios/axios">Axios</a></li>
  <li>UI框架：<a href="https://2x.antdv.com/docs/vue/introduce-cn">Ant Design Vue 2</a></li>
  <li>CSS预编译：<a href="http://lesscss.cn/">Less</a>/<a href="https://sass.bootcss.com/documentation">Sass</a></li>
  <li>代码规范：<a href="https://editorconfig.org/">EditorConfig</a> + <a href="https://eslint.org/">Eslint</a> + <a href="https://prettier.io/">Prettier</a> + <a href="https://github.com/airbnb/javascript">Airbnb JavaScript Style Guide</a></li>
  <li>Git Hook：<a href="https://typicode.github.io/husky/#/">huksy</a> + <a href="https://github.com/okonet/lint-staged">lint-staged</a></li>
  <li>提交规范：<a href="http://commitizen.github.io/cz-cli/">Commitizen</a> + <a href="https://commitlint.js.org/#/">Commitlint</a></li>
  <li>单元测试：<a href="https://next.vue-test-utils.vuejs.org/">vue-test-utils</a> + <a href="https://jestjs.io/">jest</a> + <a href="https://github.com/vuejs/vue-jest">vue-jest</a> + <a href="https://kulshekhar.github.io/ts-jest/">ts-jest</a></li>
  <li>自动部署：<a href="https://docs.github.com/cn/actions/learn-github-actions">GitHub Actions</a></li>
</ul>

<h2 id="环境信息">环境信息</h2>

<ul>
  <li>
    <p>Node版本：v16.0.0</p>

    <p>关于Node版本管理我使用的是<a href="https://github.com/nvm-sh/nvm#install--update-script">nvm</a>，我直接安装最新稳定版Node，安装最新稳定版Node命令：</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nvm <span class="nb">install </span>stable
</code></pre></div>    </div>
  </li>
  <li>
    <p>pnpm版本: 6.0.2</p>

    <p><a href="https://pnpm.io/zh/">pnpm</a>是一款很火的包管理工具，比yarn/npm更快、更省空间，且目录结构清晰。</p>
  </li>
</ul>

<h2 id="项目搭建"><a id="title1" style="color: black;">项目搭建</a></h2>

<p>确认电脑Node版本，这里我使用Vite搭建项目而不是Vue CLI，<strong>需要Node版本 &gt;= 12.0.0</strong>。</p>

<p>查看Node版本：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>node <span class="nt">-v</span>
</code></pre></div></div>

<h3 id="使用vite快速初始化项目">使用Vite快速初始化项目</h3>

<ol>
  <li>
    <p>初始化项目</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm init @vitejs/app vue3-demo <span class="nt">--</span> <span class="nt">--template</span> vue
</code></pre></div>    </div>
  </li>
  <li>
    <p>进入目录</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>vue3-demo
</code></pre></div>    </div>
  </li>
  <li>
    <p>安装依赖</p>

    <p>在根目录新增<code class="language-plaintext highlighter-rouge">.npmrc</code>配置文件，为项目配置pnpm镜像源，可以配置为国内镜像用来加速，或者是不能访问外网的公司内部镜像仓库。</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>registry=https://registry.npmjs.org/
</code></pre></div>    </div>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm i
</code></pre></div>    </div>
  </li>
  <li>
    <p>启动项目</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm run dev
</code></pre></div>    </div>
  </li>
</ol>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210424213553260.png" alt="image-20210424213553260" style="zoom: 50%;" /></p>

<p>如上图所示，一个简单的Vue3项目框架就搭建完毕，下面需要接着集成Vue Router、Vuex等其他工具。</p>

<h3 id="修改vite配置文件">修改Vite配置文件</h3>

<p>Vite配置文件<code class="language-plaintext highlighter-rouge">vite.config.js</code>位于项目根目录下面，类似于Vue CLI的<code class="language-plaintext highlighter-rouge">vue.config.js</code>，在启动项目的时候自动加载。</p>

<p>这里只做一些简单的配置，如端口、路径、代理等。详细配置可以看Vite的官网：<a href="https://cn.vitejs.dev/config/">https://cn.vitejs.dev/config/</a></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">defineConfig</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">vite</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">vue</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@vitejs/plugin-vue</span><span class="dl">'</span>

<span class="c1">// https://vitejs.dev/config/</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">defineConfig</span><span class="p">({</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nx">vue</span><span class="p">()],</span>
  <span class="na">base</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// 设置打包路径</span>
  <span class="na">server</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">port</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span> <span class="c1">// 设置服务启动端口号</span>
    <span class="na">open</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// 设置服务启动时是否自动打开浏览器</span>
    <span class="na">cors</span><span class="p">:</span> <span class="kc">true</span> <span class="c1">// 允许跨域</span>
    <span class="c1">// 设置代理，根据我们项目实际情况配置</span>
    <span class="c1">// proxy: {</span>
    <span class="c1">//   '/api': {</span>
    <span class="c1">//     target: 'http://xxx:8000',</span>
    <span class="c1">//     changeOrigin: true,</span>
    <span class="c1">//     secure: false,</span>
    <span class="c1">//     rewrite: (path) =&gt; path.replace('/api/', '/')</span>
    <span class="c1">//   }</span>
    <span class="c1">// }</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<h3 id="目录结构">目录结构</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>├── public/
└── src/
    ├── api/                       // api地址目录
    ├── assets/                    // 静态资源目录
    ├── icons/                     // svg图标目录
    ├── config/                    // 配置文件目录
    ├── core/                      // 核心配置目录
    ├── components/                // 公共组件目录
    ├── router/                    // 路由配置目录
    ├── store/                     // 状态管理目录
    ├── utils/                     // 工具函数目录
    ├── views/                     // 页面组件目录
    ├── App.vue
    ├── main.js
├── tests/                         // 单元测试目录
├── index.html
├── vite.config.ts                 // Vite 配置文件
└── package.json
</code></pre></div></div>

<h3 id="新增环境配置文件">新增环境配置文件</h3>

<p>在根目录下分别新建<code class="language-plaintext highlighter-rouge">.env</code>、<code class="language-plaintext highlighter-rouge">.env.development</code>、<code class="language-plaintext highlighter-rouge">.env.preview</code>三个文件。</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">.env</code>生产环境配置文件</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NODE_ENV=production
VUE_APP_PREVIEW=false
VUE_APP_API_BASE_URL=/api
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">.env.development</code>开发环境配置文件</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NODE_ENV=development
VUE_APP_PREVIEW=true
VUE_APP_API_BASE_URL=/api
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">.env.preview</code>测试环境配置文件</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NODE_ENV=production
VUE_APP_PREVIEW=true
VUE_APP_API_BASE_URL=/api
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="集成vue-router">集成Vue Router</h3>

<ol>
  <li>
    <p>安装Vue Router 4</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pnpm i vue-router@4
</code></pre></div>    </div>
  </li>
  <li>
    <p>创建<code class="language-plaintext highlighter-rouge">src/confit/router.config.js</code>文件</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> └── src/
     ├── config/
         ├── router.config.js  // 路由表配置文件
</code></pre></div>    </div>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 动态路由表
 */</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">asyncRouterMap</span> <span class="o">=</span> <span class="p">[]</span>
   
<span class="cm">/**
 * 基础路由表
 */</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">constantRouterMap</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">redirect</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/home</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/home</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Home</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">component</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">import</span><span class="p">(</span><span class="dl">'</span><span class="s1">../views/Home.vue</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/test</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Test</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">component</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">import</span><span class="p">(</span><span class="dl">'</span><span class="s1">../views/Test.vue</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">]</span>
</code></pre></div>    </div>

    <p>动态路由表：当需要后端生成菜单路由时（例如角色权限管理，每个角色看到的菜单路由都不一样），根据后端接口返回的菜单路由，把数据动态添加到动态路由表里，然后再把动态路由表合并到基础路由表里，具体我后面再讲。</p>
  </li>
  <li>
    <p>创建<code class="language-plaintext highlighter-rouge">src/router/index.js</code>文件</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> └── src/
     ├── router/
         ├── index.js  // 路由配置文件
</code></pre></div>    </div>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createRouter</span><span class="p">,</span> <span class="nx">createWebHashHistory</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">vue-router</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">constantRouterMap</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../config/router.config</span><span class="dl">"</span><span class="p">;</span>
   
<span class="k">export</span> <span class="k">default</span> <span class="nx">createRouter</span><span class="p">({</span>
    <span class="na">history</span><span class="p">:</span> <span class="nx">createWebHashHistory</span><span class="p">(),</span>
    <span class="na">routes</span><span class="p">:</span> <span class="nx">constantRouterMap</span>
<span class="p">})</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>在<code class="language-plaintext highlighter-rouge">src/views/</code>目录下创建<code class="language-plaintext highlighter-rouge">Home.vue</code>、<code class="language-plaintext highlighter-rouge">Test.vue</code>，这里我就不详细写了，再更改下<code class="language-plaintext highlighter-rouge">src/App.vue</code></p>

    <div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>
  <span class="nt">&lt;router-view</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>
   
<span class="nt">&lt;</span><span class="k">script</span> <span class="na">setup</span><span class="nt">&gt;&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>
   
<span class="nt">&lt;</span><span class="k">style</span><span class="nt">&gt;&lt;/</span><span class="k">style</span><span class="nt">&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>在<code class="language-plaintext highlighter-rouge">src/main.js</code>引入router</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createApp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">vue</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./App.vue</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">router</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./router/index</span><span class="dl">'</span>
   
<span class="nx">createApp</span><span class="p">(</span><span class="nx">App</span><span class="p">).</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">).</span><span class="nx">mount</span><span class="p">(</span><span class="dl">'</span><span class="s1">#app</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="集成vuex">集成Vuex</h3>

<ol>
  <li>
    <p>安装Vuex 4</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm i vuex@next
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">src/store/</code>目录下创建结构</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└── src/
    ├── store/
    		├── modules/   	// 模块目录
        ├── index.js  	// store 配置文件
        ├── getters.js  // getter配置文件
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">getters.js</code></p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getters</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">getters</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">index.js</code></p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createStore</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">vuex</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">getters</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./getters</span><span class="dl">'</span>
   
<span class="k">export</span> <span class="k">default</span> <span class="nx">createStore</span><span class="p">({</span>
    <span class="na">modules</span><span class="p">:</span> <span class="p">{},</span>
    <span class="na">state</span><span class="p">:</span> <span class="p">{},</span>
    <span class="na">mutations</span><span class="p">:</span> <span class="p">{},</span>
    <span class="na">actions</span><span class="p">:</span> <span class="p">{},</span>
    <span class="nx">getters</span>
<span class="p">})</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>在<code class="language-plaintext highlighter-rouge">src/main.js</code>引入Vuex</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createApp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">vue</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./App.vue</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">router</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./router/index</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">store</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./store/index</span><span class="dl">'</span>
   
<span class="nx">createApp</span><span class="p">(</span><span class="nx">App</span><span class="p">).</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">).</span><span class="nx">use</span><span class="p">(</span><span class="nx">store</span><span class="p">).</span><span class="nx">mount</span><span class="p">(</span><span class="dl">'</span><span class="s1">#app</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="集成http工具axios">集成HTTP工具Axios</h3>

<ol>
  <li>
    <p>安装Axios</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm i axios
</code></pre></div>    </div>
  </li>
  <li>
    <p>创建<code class="language-plaintext highlighter-rouge">src/utils/request.js</code>axios配置文件</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└── src/
    ├── utils/
    		├── request.js   	// axios配置文件
</code></pre></div>    </div>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">axios</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">axios</span><span class="dl">'</span>
   
<span class="c1">// 创建 axios 实例</span>
<span class="kd">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
    <span class="na">baseURL</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">VUE_APP_API_BASE_URL</span><span class="p">,</span> <span class="c1">// api base_url</span>
    <span class="na">timeout</span><span class="p">:</span> <span class="mi">60000</span> <span class="c1">// 请求超时时间</span>
<span class="p">})</span>
   
<span class="cm">/**
 * axios 全局错误状态码处理
 * @param error
 * @returns {Promise&lt;never&gt;}
 */</span>
<span class="kd">const</span> <span class="nx">errorHandler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// const { data } = error.response</span>
        <span class="k">switch</span> <span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="mi">403</span><span class="p">:</span>
                <span class="c1">// 拒绝访问</span>
                <span class="k">break</span>
            <span class="k">case</span> <span class="mi">500</span><span class="p">:</span>
                <span class="c1">// 服务器异常</span>
                <span class="k">break</span>
            <span class="k">case</span> <span class="mi">404</span><span class="p">:</span>
                <span class="c1">// 很抱歉，资源未找到!</span>
                <span class="k">break</span>
            <span class="k">case</span> <span class="mi">504</span><span class="p">:</span>
                <span class="c1">// 网络超时</span>
                <span class="k">break</span>
            <span class="k">case</span> <span class="mi">401</span><span class="p">:</span>
                <span class="c1">// 未授权，请重新登录</span>
                <span class="k">break</span>
            <span class="na">default</span><span class="p">:</span>
                <span class="k">break</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
<span class="p">}</span>
   
<span class="cm">/**
 * axios 配置全局请求参数
 */</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">interceptors</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">use</span><span class="p">((</span><span class="nx">config</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">config</span>
<span class="p">},</span> <span class="nx">errorHandler</span><span class="p">)</span>
   
<span class="cm">/**
 * axios 配置全局响应参数
 */</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">interceptors</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">use</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">responseType</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">blob</span><span class="dl">'</span><span class="p">)</span> <span class="k">return</span> <span class="nx">response</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span>
<span class="p">},</span> <span class="nx">errorHandler</span><span class="p">)</span>
   
<span class="k">export</span> <span class="k">default</span> <span class="nx">request</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>封装网络请求<code class="language-plaintext highlighter-rouge">src/api/methods.js</code></p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└── src/
    ├── api/
    		├── methods.js   	// 封装网络请求
</code></pre></div>    </div>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">request</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../utils/request</span><span class="dl">'</span>
   
<span class="c1">// post</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">postAction</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">parameter</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">request</span><span class="p">({</span>
    <span class="nx">url</span><span class="p">,</span>
    <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">post</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">data</span><span class="p">:</span> <span class="nx">parameter</span>
  <span class="p">})</span>
<span class="p">}</span>
   
<span class="c1">// post method= {post | put}</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">httpAction</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">parameter</span><span class="p">,</span> <span class="nx">method</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">request</span><span class="p">({</span>
    <span class="nx">url</span><span class="p">,</span>
    <span class="nx">method</span><span class="p">,</span>
    <span class="na">data</span><span class="p">:</span> <span class="nx">parameter</span>
  <span class="p">})</span>
<span class="p">}</span>
   
<span class="c1">// put</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">putAction</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">parameter</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">request</span><span class="p">({</span>
    <span class="nx">url</span><span class="p">,</span>
    <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">put</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">data</span><span class="p">:</span> <span class="nx">parameter</span>
  <span class="p">})</span>
<span class="p">}</span>
   
<span class="c1">// get</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">getAction</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">parameter</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">request</span><span class="p">({</span>
    <span class="nx">url</span><span class="p">,</span>
    <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">get</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">params</span><span class="p">:</span> <span class="nx">parameter</span>
  <span class="p">})</span>
<span class="p">}</span>
   
<span class="c1">// deleteAction</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">deleteAction</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">parameter</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">request</span><span class="p">({</span>
    <span class="nx">url</span><span class="p">,</span>
    <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">delete</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">params</span><span class="p">:</span> <span class="nx">parameter</span>
  <span class="p">})</span>
<span class="p">}</span>
   
<span class="c1">// patchAction</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">patchAction</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">parameter</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">request</span><span class="p">({</span>
    <span class="nx">url</span><span class="p">,</span>
    <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">patch</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">data</span><span class="p">:</span> <span class="nx">parameter</span>
  <span class="p">})</span>
<span class="p">}</span>
   
<span class="c1">// exportAction</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">exportAction</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">parameter</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">request</span><span class="p">({</span>
    <span class="nx">url</span><span class="p">,</span>
    <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">get</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">params</span><span class="p">:</span> <span class="nx">parameter</span><span class="p">,</span>
    <span class="na">responseType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">blob</span><span class="dl">'</span>
  <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">res</span>
    <span class="kd">const</span> <span class="nx">blob</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Blob</span><span class="p">([</span><span class="nx">data</span><span class="p">],</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/vnd.ms-excel;charset=utf-8</span><span class="dl">'</span> <span class="p">})</span>
    <span class="kd">const</span> <span class="nx">downloadElement</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">)</span>
    <span class="kd">const</span> <span class="nx">href</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">blob</span><span class="p">)</span> <span class="c1">// 创建下载的链接</span>
    <span class="nx">downloadElement</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">href</span>
    <span class="nx">downloadElement</span><span class="p">.</span><span class="nx">download</span> <span class="o">=</span> <span class="nb">decodeURI</span><span class="p">(</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="dl">'</span><span class="s1">content-disposition</span><span class="dl">'</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">;</span><span class="dl">'</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">=</span><span class="dl">'</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
    <span class="p">)</span> <span class="c1">// 下载后文件名</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">downloadElement</span><span class="p">)</span>
    <span class="nx">downloadElement</span><span class="p">.</span><span class="nx">click</span><span class="p">()</span> <span class="c1">// 点击下载</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">downloadElement</span><span class="p">)</span> <span class="c1">// 下载完成移除元素</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">revokeObjectURL</span><span class="p">(</span><span class="nx">href</span><span class="p">)</span> <span class="c1">// 释放掉blob对象</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="集成css预编译器">集成CSS预编译器</h3>

<p>Vite 内部已帮我们集成了相关的 loader，不需要额外配置。直接安装到开发依赖就可以用了。</p>

<ol>
  <li>
    <p>安装</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># less</span>
<span class="nv">$ </span>pnpm i less <span class="nt">-D</span>
<span class="c"># sass</span>
<span class="nv">$ </span>pnpm i sass <span class="nt">-D</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>使用</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style </span><span class="na">lang=</span><span class="s">"less"</span><span class="nt">&gt;</span>
  <span class="o">...</span>
<span class="nt">&lt;/style&gt;</span>
or
<span class="nt">&lt;style </span><span class="na">lang=</span><span class="s">"scss"</span><span class="nt">&gt;</span>
  <span class="o">...</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="代码规范"><a id="title2" style="color: black;">代码规范</a></h2>

<p>随着前端应用逐渐变得大型化和复杂化，在同一个项目中有多个人员参与时，每个人的前端能力程度不等，他们往往会用不同的编码风格和习惯在项目中写代码，长此下去，势必会让项目的健壮性越来越差。解决这些问题，理论上讲，口头约定和代码审查都可以，但是这种方式无法实时反馈，而且沟通成本过高，不够灵活，更关键的是无法把控。不以规矩，不能成方圆，我们不得不在项目使用一些工具来约束代码规范</p>

<p>这里讲解如何使用 <strong>EditorConfig  + ESLint + Prettier</strong> 组合来实现代码规范化。</p>

<p>这样做带来好处：</p>

<ul>
  <li>解决团队之间代码不规范导致的可读性差和可维护性差的问题。</li>
  <li>解决团队成员不同编辑器导致的编码规范不统一问题。</li>
  <li>提前发现代码风格问题，给出对应规范提示，及时修复。</li>
  <li>减少代码审查过程中反反复复的修改过程，节约时间。</li>
  <li>自动格式化，统一编码风格，从此和脏乱差的代码说再见。</li>
</ul>

<h3 id="集成editorconfig">集成EditorConfig</h3>

<p>EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。</p>

<p>在根目录下新增<code class="language-plaintext highlighter-rouge">.editorconfig</code>文件：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Editor configuration, see http://editorconfig.org

# 表示是最顶层的 EditorConfig 配置文件
root = true

[*] # 表示所有文件适用
charset = utf-8 # 设置文件字符集为 utf-8
indent_style = space # 缩进风格（tab | space）
indent_size = 2 # 缩进大小
end_of_line = lf # 控制换行类型(lf | cr | crlf)
trim_trailing_whitespace = true # 去除行首的任意空白字符
insert_final_newline = true # 始终在文件末尾插入一个新行

[*.md] # 表示仅 md 文件适用以下规则
max_line_length = off
trim_trailing_whitespace = false
</code></pre></div></div>

<blockquote>
  <p><strong>注意：</strong></p>

  <ul>
    <li>VSCode使用EditorConfig需要安装插件：<strong>EditorConfig for VS Code</strong></li>
    <li>WebStorm则不需要安装插件，可直接使用EditorConfig配置</li>
  </ul>
</blockquote>

<h3 id="集成eslint">集成Eslint</h3>

<p><a href="https://github.com/eslint/eslint">ESLint</a> 是一款用于查找并报告代码中问题的工具，并且支持部分问题自动修复。其核心是通过对代码解析得到的 AST（Abstract Syntax Tree 抽象语法树）进行模式匹配，来分析代码达到检查代码质量和风格问题的能力。</p>

<p>正如前面我们提到的因团队成员之间编程能力和编码习惯不同所造成的代码质量问题，我们使用 ESLint 来解决，一边写代码一边查找问题，如果发现错误，就给出规则提示，并且自动修复，长期下去，可以促使团队成员往同一种编码风格靠拢。</p>

<ol>
  <li>
    <p>安装Eslint</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pnpm i eslint <span class="nt">-D</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>配置eslint，在终端输入<code class="language-plaintext highlighter-rouge">pnpx eslint --init</code>，然后按照终端提示完成一系列设置来创建配置文件。</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pnpx eslint <span class="nt">--init</span>
</code></pre></div>    </div>

    <ul>
      <li>
        <p>How would you like to use ESLint?</p>

        <p><img src="https://figure-b.ricardolsw.com/image/image-20210424232428780.png" alt="image-20210424232428780" /></p>

        <p>选择<strong>To check syntax, find problems, and enforce code style</strong></p>
      </li>
      <li>
        <p>What type of modules does your project use?</p>

        <p><img src="https://figure-b.ricardolsw.com/image/image-20210424232556626.png" alt="image-20210424232556626" /></p>

        <p>选择<strong>JavaScript modules (import/export)</strong></p>
      </li>
      <li>
        <p>Which framework does your project use?</p>

        <p><img src="https://figure-b.ricardolsw.com/image/image-20210424232651740.png" alt="image-20210424232651740" /></p>

        <p>选择<strong>Vue.js</strong></p>
      </li>
      <li>
        <p>Does your project use TypeScript?</p>

        <p><img src="https://figure-b.ricardolsw.com/image/image-20210424232737023.png" alt="image-20210424232737023" /></p>

        <p>选择<strong>No</strong></p>
      </li>
      <li>
        <p>Where does your code run?</p>

        <p><img src="https://figure-b.ricardolsw.com/image/image-20210424232805378.png" alt="image-20210424232805378" /></p>

        <p>选择Browse和Node（按空格选择，回车确认）</p>
      </li>
      <li>
        <p>How would you like to define a style for your project?</p>

        <p><img src="https://figure-b.ricardolsw.com/image/image-20210424232858162.png" alt="image-20210424232858162" /></p>

        <p>选择<strong>Use a popular style guide</strong></p>
      </li>
      <li>
        <p>Which style guide do you want to follow?</p>

        <p><img src="https://figure-b.ricardolsw.com/image/image-20210424232942630.png" alt="image-20210424232942630" /></p>

        <p>选择<strong>Airbnb: https://github.com/airbnb/javascript</strong></p>

        <p>ESLint 为我们列出了三种社区流行的 JavaScript 风格指南，分别是 Airbnb、Standard、Google。</p>

        <p>这三份风格指南都是由众多大佬根据多年开发经验编写，足够优秀，全球很多大小公司都在使用。这里选用 <strong>GitHub 上 star 最多的 Airbnb</strong>，免去繁琐的配置 ESLint 规则时间，然后让团队成员去学习 Airbnb JavaScript 风格指南即可。</p>

        <p>此时，我们在 ESLint 配置了 Airbnb JavaScript 规则，在编码时，所有不符合 Airbnb 风格的代码，编辑器都会给出提示，并且可以自动修复。</p>
      </li>
      <li>
        <p>What format do you want your config file to be in?</p>

        <p><img src="https://figure-b.ricardolsw.com/image/image-20210424233129299.png" alt="image-20210424233129299" /></p>

        <p>选择<strong>JavaScript</strong></p>
      </li>
      <li>
        <p>Would you like to install them now with npm?</p>

        <p><img src="https://figure-b.ricardolsw.com/image/image-20210424233219307.png" alt="image-20210424233219307" /></p>

        <p>根据上面的选择，ESLint 会自动去查找缺失的依赖，我们这里选择 <strong>No</strong>，我们使用 pnpm 手动下载安装这些依赖包。</p>

        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm i eslint-plugin-vue eslint-config-airbnb-base eslint@^7.2.0 eslint-plugin-import@^2.22.1 <span class="nt">-D</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Eslint配置文件<code class="language-plaintext highlighter-rouge">.eslintrc.js</code></p>

    <p>在上一步操作完成后，会在根目录下自动生成<code class="language-plaintext highlighter-rouge">.eslintrc.js</code>配置文件：</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">env</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">browser</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">es2021</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">node</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">extends</span><span class="p">:</span> <span class="p">[</span>
    <span class="dl">"</span><span class="s2">plugin:vue/essential</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">airbnb-base</span><span class="dl">"</span>
  <span class="p">],</span>
  <span class="na">parserOptions</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">ecmaVersion</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span>
    <span class="na">sourceType</span><span class="p">:</span> <span class="dl">"</span><span class="s2">module</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">vue</span><span class="dl">"</span><span class="p">],</span>
  <span class="na">rules</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">import/no-unresolved</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">off</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">import/extensions</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">off</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">import/no-absolute-path</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">off</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">import/no-extraneous-dependencies</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">off</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">vue/no-multiple-template-root</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">off</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">no-param-reassign</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
      <span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="na">props</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">ignorePropertyModificationsFor</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">state</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">config</span><span class="dl">"</span><span class="p">],</span>
      <span class="p">},</span>
    <span class="p">],</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div>    </div>

    <p>如果需要额外的规则，可以在这里添加。</p>

    <blockquote>
      <p><strong>注意</strong>：VSCode需要安装<strong>ESLint</strong>插件，WebStorm则不需额外安装插件，可以直接使用。</p>
    </blockquote>
  </li>
</ol>

<h3 id="集成prettier">集成Prettier</h3>

<p>Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。</p>

<ol>
  <li>
    <p>安装Prettier</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm i prettier <span class="nt">-D</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>在根目录创建prettier配置文件<code class="language-plaintext highlighter-rouge">.prettierrc</code></p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "useTabs": false,
  "tabWidth": 2,
  "printWidth": 100,
  "singleQuote": true,
  "trailingComma": "none",
  "bracketSpacing": true,
  "semi": false
}
</code></pre></div>    </div>
  </li>
  <li>
    <p>安装好后，可使用一下命令格式化代码</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpx prettier <span class="nt">--write</span> <span class="nb">.</span>
</code></pre></div>    </div>
  </li>
</ol>

<blockquote>
  <p><strong>注意</strong>：VSCode和WebStorm都需要安装Prettier插件。</p>
</blockquote>

<h3 id="解决eslint--prettier冲突">解决ESLint + Prettier冲突</h3>

<p>通常大家会在项目中根据实际情况添加一些额外的 ESLint 和 Prettier 配置规则，难免会存在规则冲突情况。</p>

<p>本项目中的 ESLint 配置中使用了 Airbnb JavaScript 风格指南校验，其规则之一是<em>代码结束后面要加分号</em>，而我们在 Prettier 配置文件中加了<em>代码结束后面不加分号</em>的配置项，这样就有冲突了，会出现用 Prettier 格式化后的代码，ESLint 检测到格式有问题的，从而抛出错误提示。</p>

<p>解决两者冲突问题，需要用到 <strong>eslint-plugin-prettier</strong> 和 <strong>eslint-config-prettier</strong>。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">eslint-plugin-prettier</code> 将 Prettier 的规则设置到 ESLint 的规则中。</li>
  <li><code class="language-plaintext highlighter-rouge">eslint-config-prettier</code> 关闭 ESLint 中与 Prettier 中会发生冲突的规则。</li>
</ul>

<p>最后形成优先级：<code class="language-plaintext highlighter-rouge">Prettier 配置规则</code> &gt; <code class="language-plaintext highlighter-rouge">ESLint 配置规则</code>。</p>

<ol>
  <li>
    <p>安装插件</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm i eslint-plugin-prettier eslint-config-prettier <span class="nt">-D</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>在<code class="language-plaintext highlighter-rouge">.eslintrc.js</code>添加prettier插件</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">env</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">browser</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">es2021</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">node</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">extends</span><span class="p">:</span> <span class="p">[</span>
    <span class="dl">"</span><span class="s2">plugin:vue/essential</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">airbnb-base</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">plugin:prettier/recommended</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// 添加 prettier 插件</span>
  <span class="p">],</span>
  <span class="na">parserOptions</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">ecmaVersion</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span>
    <span class="na">sourceType</span><span class="p">:</span> <span class="dl">"</span><span class="s2">module</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">vue</span><span class="dl">"</span><span class="p">],</span>
  <span class="na">rules</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">import/no-unresolved</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">off</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">import/extensions</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">off</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">import/no-absolute-path</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">off</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">import/no-extraneous-dependencies</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">off</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">vue/no-multiple-template-root</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">off</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">no-param-reassign</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
      <span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="na">props</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">ignorePropertyModificationsFor</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">state</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">config</span><span class="dl">"</span><span class="p">],</span>
      <span class="p">},</span>
    <span class="p">],</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>这样，我们在执行 <code class="language-plaintext highlighter-rouge">eslint --fix</code> 命令时，ESLint 就会按照 Prettier 的配置规则来格式化代码，轻松解决二者冲突问题。</p>

<h3 id="集成git-hook工具husky-和-lint-staged">集成Git Hook工具：husky 和 lint-staged</h3>

<p>我们在项目中已集成 ESLint 和 Prettier，在编码时，这些工具可以对我们写的代码进行实时校验，在一定程度上能有效规范我们写的代码，但团队可能会有些人觉得这些条条框框的限制很麻烦，选择视“提示”而不见，依旧按自己的一套风格来写代码，或者干脆禁用掉这些工具，开发完成就直接把代码提交到了仓库，日积月累，ESLint 也就形同虚设。</p>

<p>所以，我们还需要做一些限制，让没通过 ESLint 检测和修复的代码禁止提交，从而保证仓库代码都是符合规范的。</p>

<p>为了解决这个问题，我们需要用到 Git Hook，在本地执行 <code class="language-plaintext highlighter-rouge">git commit</code> 的时候，就对所提交的代码进行 ESLint 检测和修复（即执行 <code class="language-plaintext highlighter-rouge">eslint --fix</code>），如果这些代码没通过 ESLint 规则校验，则禁止提交。</p>

<p>实现这一功能，我们借助 <a href="https://github.com/typicode/husky">husky</a> + <a href="https://github.com/okonet/lint-staged">lint-staged</a> 。</p>

<h4 id="配置husky">配置husky</h4>

<p>使用<code class="language-plaintext highlighter-rouge">husky-init</code>命令快速初始化一个husky配置</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpx husky-init <span class="o">&amp;&amp;</span> pnpm i
</code></pre></div></div>

<blockquote>
  <p><strong>注意</strong>：配置husky之前要建立git仓库，使用<code class="language-plaintext highlighter-rouge">git init</code>创建本地仓库。</p>
</blockquote>

<p>该命令做了一下四件事：</p>

<ol>
  <li>
    <p>安装husky到开发依赖：</p>

    <p><img src="https://figure-b.ricardolsw.com/image/image-20210425084142819.png" alt="image-20210425084142819" /></p>
  </li>
  <li>
    <p>在根目录下创建<code class="language-plaintext highlighter-rouge">.husky</code>目录</p>

    <p><img src="https://figure-b.ricardolsw.com/image/image-20210425084416827.png" alt="image-20210425084416827" /></p>
  </li>
  <li>
    <p>在 <code class="language-plaintext highlighter-rouge">.husky</code> 目录创建 <code class="language-plaintext highlighter-rouge">pre-commit</code> hook，并初始化 <code class="language-plaintext highlighter-rouge">pre-commit</code> 命令为 <code class="language-plaintext highlighter-rouge">npm test</code></p>

    <p><img src="https://figure-b.ricardolsw.com/image/image-20210425084517705.png" alt="image-20210425084517705" /></p>
  </li>
  <li>
    <p>修改 <code class="language-plaintext highlighter-rouge">package.json</code> 的 <code class="language-plaintext highlighter-rouge">scripts</code>，增加 <code class="language-plaintext highlighter-rouge">"prepare": "husky install"</code></p>

    <p><img src="https://figure-b.ricardolsw.com/image/image-20210425084545824.png" alt="image-20210425084545824" /></p>
  </li>
</ol>

<h4 id="使用husky">使用husky</h4>

<p>修改 <code class="language-plaintext highlighter-rouge">.husky/pre-commit</code> hook 文件的触发命令：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>
<span class="nb">.</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">dirname</span> <span class="s2">"</span><span class="nv">$0</span><span class="s2">"</span><span class="si">)</span><span class="s2">/_/husky.sh"</span>

eslint <span class="nt">--fix</span> ./src <span class="nt">--ext</span> .vue,.js,.jsx
</code></pre></div></div>

<p>上面这个 <code class="language-plaintext highlighter-rouge">pre-commit</code> hook 文件的作用是：当我们执行 <code class="language-plaintext highlighter-rouge">git commit -m "xxx"</code> 时，会先对 <code class="language-plaintext highlighter-rouge">src</code> 目录下所有的 <code class="language-plaintext highlighter-rouge">.vue</code>、<code class="language-plaintext highlighter-rouge">.js</code>、<code class="language-plaintext highlighter-rouge">.ts </code> 文件执行 <code class="language-plaintext highlighter-rouge">eslint --fix</code> 命令，如果 ESLint 通过，成功 <code class="language-plaintext highlighter-rouge">commit</code>，否则终止 <code class="language-plaintext highlighter-rouge">commit</code>。</p>

<p>但是又存在一个问题：有时候我们明明只改动了一两个文件，却要对所有的文件执行 <code class="language-plaintext highlighter-rouge">eslint --fix</code>。假如这是一个历史项目，我们在中途配置了 ESLint 规则，那么在提交代码时，也会对其他未修改的“历史”文件都进行检查，可能会造成大量文件出现 ESLint 错误，显然不是我们想要的结果。</p>

<p>我们要做到只用 ESLint 修复自己此次写的代码，而不去影响其他的代码。所以我们还需借助一个神奇的工具 <strong>lint-staged</strong> 。</p>

<h4 id="配置lint-staged">配置lint-staged</h4>

<p>lint-staged 这个工具一般结合 husky 来使用，它可以让 husky 的 <code class="language-plaintext highlighter-rouge">hook</code> 触发的命令只作用于 <code class="language-plaintext highlighter-rouge">git add</code>那些文件（即 git 暂存区的文件），而不会影响到其他文件。</p>

<ol>
  <li>
    <p>安装lint-staged</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm i lint-staged <span class="nt">-D</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>在<code class="language-plaintext highlighter-rouge">package.json</code>里增加配置项</p>

    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"lint-staged"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"*.{vue,js,jsx}"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"eslint --fix"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"git add"</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>修改 <code class="language-plaintext highlighter-rouge">.husky/pre-commit</code> hook 的触发命令为：<code class="language-plaintext highlighter-rouge">npx lint-staged</code></p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>
<span class="nb">.</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">dirname</span> <span class="s2">"</span><span class="nv">$0</span><span class="s2">"</span><span class="si">)</span><span class="s2">/_/husky.sh"</span>
   
npx lint-staged
</code></pre></div>    </div>
  </li>
</ol>

<p>至此，husky 和 lint-staged 配置完成。</p>

<p>当我们修改了代码后，在commit的时候就会触发<code class="language-plaintext highlighter-rouge">pre-commit</code>这个hook，在<code class="language-plaintext highlighter-rouge">pre-commit</code>里又会触发<code class="language-plaintext highlighter-rouge">lint-staged</code>里的eslint去检查语法错误。如下图：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210425085738205.png" alt="image-20210425085738205" /></p>

<p>当eslint检查不通过是就会拒绝提交，如下图：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210425090215833.png" alt="image-20210425090215833" /></p>

<p>修改后再次提交，提交成功：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210425090407500.png" alt="image-20210425090407500" /></p>

<h2 id="提交规范"><a id="title3" style="color: black;">提交规范</a></h2>

<p>前面我们已经统一代码规范，并且在提交代码时进行强约束来保证仓库代码质量。多人协作的项目中，在提交代码这个环节，也存在一种情况：不能保证每个人对提交信息的准确描述，因此会出现提交信息紊乱、风格不一致的情况。</p>

<p>如果 <code class="language-plaintext highlighter-rouge">git commit</code> 的描述信息精准，在后期维护和 Bug 处理时会变得有据可查，项目开发周期内还可以根据规范的提交信息快速生成开发日志，从而方便我们追踪项目和把控进度。</p>

<p>这里，我们使用社区最流行、最知名、最受认可的 Angular 团队提交规范。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;Header&gt;

&lt;Body&gt;

&lt;Footer&gt;
</code></pre></div></div>

<h3 id="header规范">Header规范</h3>

<p>Header 部分包括三个字段 type（必需）、scope（可选）和 subject（必需）。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;
</code></pre></div></div>

<h4 id="type说明">type说明</h4>

<table>
  <thead>
    <tr>
      <th>值</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>feat</td>
      <td>新增一个功能</td>
    </tr>
    <tr>
      <td>fix</td>
      <td>修复一个bug</td>
    </tr>
    <tr>
      <td>docs</td>
      <td>文档变更</td>
    </tr>
    <tr>
      <td>style</td>
      <td>代码格式（不影响功能，例如空格、分号等格式修正）</td>
    </tr>
    <tr>
      <td>refactor</td>
      <td>代码重构</td>
    </tr>
    <tr>
      <td>perf</td>
      <td>改善性能</td>
    </tr>
    <tr>
      <td>test</td>
      <td>测试</td>
    </tr>
    <tr>
      <td>build</td>
      <td>变更项目构建或外部依赖（例如scopes: webpack、gulp、npm等）</td>
    </tr>
    <tr>
      <td>ci</td>
      <td>更改持续集成软件的配置文件和package中的script命令，例如scopes: Travis、Circle等</td>
    </tr>
    <tr>
      <td>chore</td>
      <td>变更构建流程或辅助工具</td>
    </tr>
    <tr>
      <td>revert</td>
      <td>代码回退</td>
    </tr>
  </tbody>
</table>

<h4 id="scope说明">scope说明</h4>

<p>scope 用于指定本次 commit 影响的范围。scope 依据项目而定，例如在业务项目中可以依据菜单或者功能模块划分，如果是组件库开发，则可以依据组件划分。（scope 可省略）</p>

<h4 id="subject说明">subject说明</h4>

<p>subject 是本次 commit 的简洁描述，长度约定在 50 个字符以内，通常遵循以下几个规范：</p>

<ul>
  <li>用动词开头，第一人称现在时表述，例如：change 代替 changed 或 changes</li>
  <li>第一个字母小写</li>
  <li>结尾不加句号（.）</li>
</ul>

<h3 id="body">Body</h3>

<p>body 是对本次 commit 的详细描述，可以分成多行。（body 可省略）</p>

<p>跟 subject 类似，用动词开头，body 应该说明修改的原因和更改前后的行为对比。</p>

<h3 id="footer">Footer</h3>

<p>如果本次提交的代码是突破性的变更或关闭缺陷，则 Footer 必需，否则可以省略。</p>

<ul>
  <li>
    <p>突破性的变更</p>

    <p>当前代码与上一个版本有突破性改变，则 Footer 以 BREAKING CHANGE 开头，后面是对变动的描述、以及变动的理由。</p>
  </li>
  <li>
    <p>关闭缺陷</p>

    <p>如果当前提交是针对特定的 issue，那么可以在 Footer 部分填写需要关闭的单个 issue 或一系列 issues。</p>
  </li>
</ul>

<h3 id="规范-commit-message-的好处">规范 commit message 的好处</h3>

<ul>
  <li>
    <p>首行就是简洁实用的关键信息，方便在 git history 中快速浏览。</p>
  </li>
  <li>
    <p>具有更加详细的 body 和 footer，可以清晰的看出某次提交的目的和影响。</p>
  </li>
  <li>
    <p>可以通过 type 过滤出想要查找的信息，也可以通过关键字快速查找相关提交。</p>
  </li>
  <li>
    <p>可以直接从 commit 生成 change log。</p>
  </li>
</ul>

<h3 id="集成-commitizen">集成 Commitizen</h3>

<p>Commitizen 是一个帮助撰写规范 commit message 的工具。它有一个命令行工具 cz-cli。</p>

<ol>
  <li>
    <p>安装Commitizen</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm i commitizen <span class="nt">-D</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>使用<code class="language-plaintext highlighter-rouge">commitizen init cz-conventional-changelog</code>命令初始化配置</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpx commitizen init cz-conventional-changelog <span class="nt">--save-dev</span> <span class="nt">--save-exact</span>
</code></pre></div>    </div>

    <p>该命令做了两件事</p>

    <ul>
      <li>
        <p>安装<code class="language-plaintext highlighter-rouge">cz-conventional-changelog</code>到开发依赖</p>
      </li>
      <li>
        <p>在 <code class="language-plaintext highlighter-rouge">package.json</code> 中增加了 <code class="language-plaintext highlighter-rouge">config.commitizen</code></p>

        <p><img src="https://figure-b.ricardolsw.com/image/image-20210425094216285.png" alt="image-20210425094216285" /></p>

        <blockquote>
          <p>如果使用命令太慢或者报错，可以手动安装配置：</p>

          <ul>
            <li>
              <p>安装依赖</p>

              <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm i cz-conventional-changelog <span class="nt">-D</span>
</code></pre></div>              </div>
            </li>
            <li>
              <p><code class="language-plaintext highlighter-rouge">package.json</code>增加配置</p>

              <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"config"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"commitizen"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./node_modules/cz-conventional-changelog"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>              </div>
            </li>
          </ul>
        </blockquote>
      </li>
    </ul>
  </li>
  <li>
    <p>使用Commitizen</p>

    <p>以前我们使用的是<code class="language-plaintext highlighter-rouge">git commit -m "msg"</code>，现在改为<code class="language-plaintext highlighter-rouge">git cz</code>，然后按照终端提示，逐步输入信息，就能自动生成规范的commit message</p>

    <p><img src="https://figure-b.ricardolsw.com/image/image-20210425094755418.png" alt="image-20210425094755418" /></p>

    <p><img src="https://figure-b.ricardolsw.com/image/image-20210425094856961.png" alt="image-20210425094856961" /></p>

    <h3 id="自定义配置提交说明">自定义配置提交说明</h3>

    <p>从上面的截图可以看到，<code class="language-plaintext highlighter-rouge">git cz</code> 终端操作提示都是英文的，如果想改成中文的或者自定义这些配置选项，我们使用 <strong>cz-customizable</strong> 适配器。</p>

    <ol>
      <li>
        <p>安装cz-customizable</p>

        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm i cz-customizable <span class="nt">-D</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>修改 <code class="language-plaintext highlighter-rouge">package.json</code> 中的 <code class="language-plaintext highlighter-rouge">config.commitizen</code> 字段</p>

        <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"config"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"commitizen"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./node_modules/cz-customizable"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>        </div>
      </li>
      <li>
        <p>在根目录下新建<code class="language-plaintext highlighter-rouge">.cz-config.js</code>文件，配置中文</p>

        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="c1">// type 类型（定义之后，可通过上下键选择）</span>
  <span class="na">types</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">feat</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">feat:     新增功能</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">fix</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">fix:      修复 bug</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">docs</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">docs:     文档变更</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">style</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">style:    代码格式（不影响功能，例如空格、分号等格式修正）</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">refactor</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">refactor: 代码重构（不包括 bug 修复、功能新增）</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">perf</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">perf:     性能优化</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">test:     添加、修改测试用例</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">build</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">build:    构建流程、外部依赖变更（如升级 npm 包、修改 webpack 配置等）</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ci</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ci:       修改 CI 配置、脚本</span><span class="dl">'</span> <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">chore</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">chore:    对构建过程或辅助工具和库的更改（不影响源文件、测试用例）</span><span class="dl">'</span>
    <span class="p">},</span>
    <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">revert</span><span class="dl">'</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">revert:   回滚 commit</span><span class="dl">'</span> <span class="p">}</span>
  <span class="p">],</span>
      
  <span class="c1">// scope 类型（定义之后，可通过上下键选择）</span>
  <span class="na">scopes</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">[</span><span class="dl">'</span><span class="s1">components</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">组件相关</span><span class="dl">'</span><span class="p">],</span>
    <span class="p">[</span><span class="dl">'</span><span class="s1">hooks</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">hook 相关</span><span class="dl">'</span><span class="p">],</span>
    <span class="p">[</span><span class="dl">'</span><span class="s1">utils</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utils 相关</span><span class="dl">'</span><span class="p">],</span>
    <span class="p">[</span><span class="dl">'</span><span class="s1">element-ui</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">对 element-ui 的调整</span><span class="dl">'</span><span class="p">],</span>
    <span class="p">[</span><span class="dl">'</span><span class="s1">styles</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">样式相关</span><span class="dl">'</span><span class="p">],</span>
    <span class="p">[</span><span class="dl">'</span><span class="s1">deps</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">项目依赖</span><span class="dl">'</span><span class="p">],</span>
    <span class="p">[</span><span class="dl">'</span><span class="s1">auth</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">对 auth 修改</span><span class="dl">'</span><span class="p">],</span>
    <span class="p">[</span><span class="dl">'</span><span class="s1">other</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">其他修改</span><span class="dl">'</span><span class="p">],</span>
    <span class="c1">// 如果选择 custom，后面会让你再输入一个自定义的 scope。也可以不设置此项，把后面的 allowCustomScopes 设置为 true</span>
    <span class="p">[</span><span class="dl">'</span><span class="s1">custom</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">以上都不是？我要自定义</span><span class="dl">'</span><span class="p">]</span>
  <span class="p">].</span><span class="nx">map</span><span class="p">(([</span><span class="nx">value</span><span class="p">,</span> <span class="nx">description</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="nx">value</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="nx">value</span><span class="p">.</span><span class="nx">padEnd</span><span class="p">(</span><span class="mi">30</span><span class="p">)}</span><span class="s2"> (</span><span class="p">${</span><span class="nx">description</span><span class="p">}</span><span class="s2">)`</span>
    <span class="p">}</span>
  <span class="p">}),</span>
      
  <span class="c1">// 是否允许自定义填写 scope，在 scope 选择的时候，会有 empty 和 custom 可以选择。</span>
  <span class="c1">// allowCustomScopes: true,</span>
      
  <span class="c1">// allowTicketNumber: false,</span>
  <span class="c1">// isTicketNumberRequired: false,</span>
  <span class="c1">// ticketNumberPrefix: 'TICKET-',</span>
  <span class="c1">// ticketNumberRegExp: '\\d{1,5}',</span>
      
  <span class="c1">// 针对每一个 type 去定义对应的 scopes，例如 fix</span>
  <span class="cm">/*
  scopeOverrides: {
    fix: [
      { name: 'merge' },
      { name: 'style' },
      { name: 'e2eTest' },
      { name: 'unitTest' }
    ]
  },
  */</span>
      
  <span class="c1">// 交互提示信息</span>
  <span class="na">messages</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">确保本次提交遵循 Angular 规范！</span><span class="se">\n</span><span class="s1">选择你要提交的类型：</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">scope</span><span class="p">:</span> <span class="dl">'</span><span class="se">\n</span><span class="s1">选择一个 scope（可选）：</span><span class="dl">'</span><span class="p">,</span>
    <span class="c1">// 选择 scope: custom 时会出下面的提示</span>
    <span class="na">customScope</span><span class="p">:</span> <span class="dl">'</span><span class="s1">请输入自定义的 scope：</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">subject</span><span class="p">:</span> <span class="dl">'</span><span class="s1">填写简短精炼的变更描述：</span><span class="se">\n</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">body</span><span class="p">:</span> <span class="dl">'</span><span class="s1">填写更加详细的变更描述（可选）。使用 "|" 换行：</span><span class="se">\n</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">breaking</span><span class="p">:</span> <span class="dl">'</span><span class="s1">列举非兼容性重大的变更（可选）：</span><span class="se">\n</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">footer</span><span class="p">:</span> <span class="dl">'</span><span class="s1">列举出所有变更的 ISSUES CLOSED（可选）。 例如: #31, #34：</span><span class="se">\n</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">confirmCommit</span><span class="p">:</span> <span class="dl">'</span><span class="s1">确认提交？</span><span class="dl">'</span>
  <span class="p">},</span>
      
  <span class="c1">// 设置只有 type 选择了 feat 或 fix，才询问 breaking message</span>
  <span class="na">allowBreakingChanges</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">feat</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fix</span><span class="dl">'</span><span class="p">],</span>
      
  <span class="c1">// 跳过要询问的步骤</span>
  <span class="na">skipQuestions</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">body</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">footer</span><span class="dl">'</span><span class="p">],</span>
      
  <span class="na">subjectLimit</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="c1">// subject 限制长度</span>
  <span class="na">breaklineChar</span><span class="p">:</span> <span class="dl">'</span><span class="s1">|</span><span class="dl">'</span> <span class="c1">// 换行符，支持 body 和 footer</span>
  <span class="c1">// footerPrefix : 'ISSUES CLOSED:'</span>
  <span class="c1">// askForBreakingChangeFirst : true,</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>再次使用<code class="language-plaintext highlighter-rouge">git cz</code>，提示信息变为中文</p>

        <p><img src="https://figure-b.ricardolsw.com/image/image-20210425095536894.png" alt="image-20210425095536894" /></p>
      </li>
    </ol>
  </li>
</ol>

<h3 id="集成commitlint验证提交规范">集成commitlint验证提交规范</h3>

<p>在<a href="#title2">代码规范</a>章节，我们已经讲到过，尽管制定了规范，但在多人协作的项目中，总有些人依旧我行我素，因此提交代码这个环节，我们也增加一个限制，并且也要加到Git Hook中。</p>

<ol>
  <li>
    <p>安装<code class="language-plaintext highlighter-rouge">@commitlint/config-conventional</code> 和 <code class="language-plaintext highlighter-rouge">@commitlint/cli</code></p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm i @commitlint/config-conventional @commitlint/cli <span class="nt">-D</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>在根目录下新建<code class="language-plaintext highlighter-rouge">commitlint.config.js</code>文件</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span> <span class="na">extends</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">@commitlint/config-conventional</span><span class="dl">'</span><span class="p">]</span> <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>新建<code class="language-plaintext highlighter-rouge">.husky/commit-msg</code>文件</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>
<span class="nb">.</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">dirname</span> <span class="s2">"</span><span class="nv">$0</span><span class="s2">"</span><span class="si">)</span><span class="s2">/_/husky.sh"</span>
   
npx <span class="nt">--no-install</span> commitlint <span class="nt">--edit</span>
</code></pre></div>    </div>
  </li>
</ol>

<h4 id="使用commitlint验证">使用commitlint验证</h4>

<ul>
  <li>
    <p>不规范的提交信息</p>

    <p><img src="https://figure-b.ricardolsw.com/image/image-20210425100506296.png" alt="image-20210425100506296" /></p>
  </li>
  <li>
    <p>正确的提交信息</p>

    <p><img src="https://figure-b.ricardolsw.com/image/image-20210425100553721.png" alt="image-20210425100553721" /></p>
  </li>
</ul>

<p>因为已在项目中集成 commitizen，建议大家用 <code class="language-plaintext highlighter-rouge">git cz</code> 来代替 <code class="language-plaintext highlighter-rouge">git commit</code> 提交代码，可以保证提交信息规范。</p>

<h2 id="单元测试"><a id="title4" style="color: black;">单元测试</a></h2>

<p>单元测试是项目开发中一个非常重要的环节，完整的测试能为代码和业务提供质量保证，减少 Bug 的出现。</p>

<h3 id="集成jest">集成Jest</h3>

<ol>
  <li>
    <p>安装jest相关依赖</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm i @vue/test-utils@next jest vue-jest@next ts-jest babel-jest typescript @types/jest <span class="nt">-D</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>在根目录下创建<code class="language-plaintext highlighter-rouge">jest.config.js</code>配置文件，这里配置的同时支持js和ts</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">moduleFileExtensions</span><span class="p">:</span> <span class="p">[</span>
    <span class="dl">'</span><span class="s1">js</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">vue</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">ts</span><span class="dl">'</span>
  <span class="p">],</span>
  <span class="na">transform</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">'</span><span class="s1">^.+</span><span class="se">\\</span><span class="s1">.js$</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">babel-jest</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">^.+</span><span class="se">\\</span><span class="s1">.vue$</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">vue-jest</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">^.+</span><span class="se">\\</span><span class="s1">.ts$</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ts-jest</span><span class="dl">'</span>
  <span class="p">},</span>
  <span class="na">testRegex</span><span class="p">:</span> <span class="dl">'</span><span class="s1">(/__tests__/.*|(</span><span class="se">\\</span><span class="s1">.|/)(test|spec))</span><span class="se">\\</span><span class="s1">.(js|ts)$</span><span class="dl">'</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>安装babel支持</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm i @babel/preset-env babel-plugin-transform-import-meta <span class="nt">-D</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>在根目录创建<code class="language-plaintext highlighter-rouge">babel.config.js</code>配置文件</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">presets</span><span class="p">:</span> <span class="p">[[</span><span class="dl">'</span><span class="s1">@babel/preset-env</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">targets</span><span class="p">:</span> <span class="p">{</span> <span class="na">node</span><span class="p">:</span> <span class="dl">'</span><span class="s1">current</span><span class="dl">'</span> <span class="p">}</span> <span class="p">}]],</span>
  <span class="na">env</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">test</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
        <span class="dl">'</span><span class="s1">babel-plugin-transform-import-meta</span><span class="dl">'</span><span class="p">,</span>
      <span class="p">],</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>配置eslint规则</p>

    <ul>
      <li>
        <p>安装依赖</p>

        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm i eslint-plugin-jest <span class="nt">-D</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>修改<code class="language-plaintext highlighter-rouge">.eslintrc.js</code>文件里的<code class="language-plaintext highlighter-rouge">extends</code></p>

        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extends</span><span class="p">:</span> <span class="p">[</span>
  <span class="dl">"</span><span class="s2">plugin:vue/essential</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">airbnb-base</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">plugin:prettier/recommended</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">plugin:jest/recommended</span><span class="dl">'</span>				 <span class="c1">// 添加 jest 插件</span>
<span class="p">]</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>在<code class="language-plaintext highlighter-rouge">package.json</code>里的<code class="language-plaintext highlighter-rouge">scripts</code>新增属性</p>

    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vite"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vite build"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"serve"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vite preview"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"lint"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eslint ./src --ext .vue,.js,.jsx"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"lint-fix"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eslint --fix ./src --ext .vue,.js,.jsx"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"prepare"</span><span class="p">:</span><span class="w"> </span><span class="s2">"husky install"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"jest"</span><span class="w">			</span><span class="err">//</span><span class="w"> </span><span class="err">测试命令</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ol>

<h3 id="创建单元测试文件">创建单元测试文件</h3>

<ol>
  <li>
    <p>先修改下<code class="language-plaintext highlighter-rouge">src/views/Test.vue</code>文件</p>

    <div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"test-container page-container"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"page-title"</span><span class="nt">&gt;</span>Unit Test Page<span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;p&gt;</span>count is: 8<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;button</span> <span class="err">@</span><span class="na">click=</span><span class="s">"increment"</span><span class="nt">&gt;</span>increment<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>
   
<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ref</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">vue</span><span class="dl">'</span>
   
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Test</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">ref</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
      <span class="kd">const</span> <span class="nx">increment</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">count</span><span class="p">.</span><span class="nx">value</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="p">{</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">increment</span> <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>创建<code class="language-plaintext highlighter-rouge">test/Test.spec.js</code>测试文件</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>├── src/
└── tests/                           // 单元测试目录
    ├── Test.spec.js                 // Test 组件测试
</code></pre></div>    </div>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">mount</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@vue/test-utils</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">Test</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../src/views/Test.vue</span><span class="dl">'</span>
   
<span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">Test.vue</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">mount</span><span class="p">(</span><span class="nx">Test</span><span class="p">)</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">html</span><span class="p">()).</span><span class="nx">toContain</span><span class="p">(</span><span class="dl">'</span><span class="s1">Unit Test Page</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">html</span><span class="p">()).</span><span class="nx">toContain</span><span class="p">(</span><span class="dl">'</span><span class="s1">count is: 0</span><span class="dl">'</span><span class="p">)</span>
  <span class="k">await</span> <span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">html</span><span class="p">()).</span><span class="nx">toContain</span><span class="p">(</span><span class="dl">'</span><span class="s1">count is: 1</span><span class="dl">'</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>执行单元测试</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pnpm run <span class="nb">test</span>
</code></pre></div>    </div>

    <ul>
      <li>
        <p>成功示例</p>

        <p><img src="https://figure-b.ricardolsw.com/image/image-20210425113752268.png" alt="image-20210425113752268" /></p>
      </li>
      <li>
        <p>失败示例</p>

        <p><img src="https://figure-b.ricardolsw.com/image/image-20210425113848214.png" alt="image-20210425113848214" /></p>
      </li>
    </ul>
  </li>
</ol>

<h3 id="集成至git-hook">集成至Git Hook</h3>

<p>同样单元测试也需要添加到Git Hook里面，只有单元测试全部通过才能推送到远程代码仓库中，否者就终止<code class="language-plaintext highlighter-rouge">push</code>。</p>

<p>在<code class="language-plaintext highlighter-rouge">.husky/</code>目录下新增<code class="language-plaintext highlighter-rouge">pre-push</code>文件</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>
<span class="nb">.</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">dirname</span> <span class="s2">"</span><span class="nv">$0</span><span class="s2">"</span><span class="si">)</span><span class="s2">/_/husky.sh"</span>

npm run <span class="nb">test</span>
</code></pre></div></div>

<p>现在，我们在 <code class="language-plaintext highlighter-rouge">git push</code> 时就能先进行单元测试了，只有单元测试全部通过，才能成功 <code class="language-plaintext highlighter-rouge">push</code>。</p>

<h2 id="写在最后">写在最后</h2>

<p>到这里一个基本的前端工程就完成了，自动部署这里就先不写了，后面我单独再写一篇讲讲这部分内容。</p>]]></content><author><name>Ricardo</name></author><category term="Vue" /><category term="Vue3" /><summary type="html"><![CDATA[前言]]></summary></entry><entry><title type="html">Nginx负载均衡</title><link href="/%E6%9C%8D%E5%8A%A1%E5%99%A8/Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/" rel="alternate" type="text/html" title="Nginx负载均衡" /><published>2021-03-17T00:00:00+00:00</published><updated>2021-03-17T10:28:00+00:00</updated><id>/%E6%9C%8D%E5%8A%A1%E5%99%A8/Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1</id><content type="html" xml:base="/%E6%9C%8D%E5%8A%A1%E5%99%A8/Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"><![CDATA[]]></content><author><name>Ricardo</name></author><category term="服务器" /><category term="网络" /><category term="工具" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">微信小程序将页面保存成图片</title><link href="/%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B0%86%E9%A1%B5%E9%9D%A2%E4%BF%9D%E5%AD%98%E6%88%90%E5%9B%BE%E7%89%87/" rel="alternate" type="text/html" title="微信小程序将页面保存成图片" /><published>2021-03-15T00:00:00+00:00</published><updated>2021-03-15T09:55:37+00:00</updated><id>/%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B0%86%E9%A1%B5%E9%9D%A2%E4%BF%9D%E5%AD%98%E6%88%90%E5%9B%BE%E7%89%87</id><content type="html" xml:base="/%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B0%86%E9%A1%B5%E9%9D%A2%E4%BF%9D%E5%AD%98%E6%88%90%E5%9B%BE%E7%89%87/"><![CDATA[<blockquote>
  <p>前言：这玩意是真的坑</p>
</blockquote>

<h2 id="开发环境">开发环境</h2>

<p><a href="https://cml.js.org/docs/">chameleon框架</a></p>

<h2 id="原型图">原型图</h2>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315093335719.png" alt="image-20210315093335719" /></p>

<h2 id="代码实现各种踩坑">代码实现（各种踩坑）</h2>

<p>页面具体怎么画的这里就不多说了，具体讲保存图片这个功能，一看到这个功能就觉得似曾相识，我以前好像做过，立马想到了html2cavas这个插件，开开心心的把这玩意下载下来。这玩意怎么用我在<a href="https://ricardolsw.github.io/%E5%89%8D%E7%AB%AF/%E5%B0%86%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E8%BD%AC%E4%B8%BAcanvas%E5%B9%B6%E5%AF%BC%E5%87%BA%E4%B8%BAPDF%E6%96%87%E4%BB%B6/">《<strong>将页面元素转为canvas并导出为PDF文件</strong>》</a>里面有讲到过，它需要传入一个原生DOM元素，它会把这个DOM绘制成canvas并且返回出来。</p>

<h3 id="这个时候第一个坑来了">这个时候第一个坑来了</h3>

<p>当使用<code class="language-plaintext highlighter-rouge">document.querySelector</code>的时候，直接报错了。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315123628498.png" alt="image-20210315123628498" /></p>

<p>翻阅文档发现，小程序不支持上面那种方式获取DOM，需要使用小程序提供的api来获取。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315132433020.png" alt="image-20210315132433020" /></p>

<p>但是使用该api获取到的并不是原生DOM，翻阅了很多资料也没找到解决方案，因此我就放弃了使用html2canvas这个插件。</p>

<h3 id="使用chameleon多态协议调用wxcreatecanvascontext">使用chameleon多态协议调用wx.createCanvasContext</h3>

<p>我只能老老实实的手动去把这个页面用canvas画出来，微信小程序提供了画布的相关api，但是呢，chameleon框架并不能直接访问这些api，它需要使用一个被称作<a href="https://cml.js.org/docs/poly.html">多态协议</a>的一个东西。</p>

<p>在<code class="language-plaintext highlighter-rouge">src/component/html2image/</code>下新建<strong>index.interface</strong></p>

<div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">cml-type=</span><span class="s">"interface"</span><span class="nt">&gt;</span>
    <span class="kr">interface</span> <span class="nx">html2ImageInterface</span> <span class="p">{</span>
        <span class="nx">saveImage</span><span class="p">(</span><span class="nx">title</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">code</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">desc</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">img</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="k">void</span><span class="p">;</span>
    <span class="p">}</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>
<span class="nt">&lt;</span><span class="k">script</span> <span class="na">cml-type=</span><span class="s">"wx"</span><span class="nt">&gt;</span>
    <span class="kd">class</span> <span class="nx">Method</span> <span class="kr">implements</span> <span class="nx">html2ImageInterface</span> <span class="p">{</span>
        <span class="cm">/**
           * 
           * @param title 标题
           * @param code 合同号
           * @param desc 描述
           * @param img 二维码
           */</span>
        <span class="nx">saveImage</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">code</span><span class="p">,</span> <span class="nx">desc</span><span class="p">,</span> <span class="nx">img</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">wx</span><span class="p">.</span><span class="nx">createCanvasContext</span><span class="p">(</span><span class="dl">'</span><span class="s1">qrcode</span><span class="dl">'</span><span class="p">);</span>
          	<span class="c1">// 设置字体</span>
            <span class="nx">ctx</span><span class="p">.</span><span class="nx">setFontSize</span><span class="p">(</span><span class="mi">36</span><span class="p">)</span>
          	<span class="c1">// 设置填充色</span>
            <span class="nx">ctx</span><span class="p">.</span><span class="nx">setFillStyle</span><span class="p">(</span><span class="dl">'</span><span class="s1">#F9F9F8</span><span class="dl">'</span><span class="p">)</span>
          	<span class="c1">// 绘制矩形</span>
            <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">700</span><span class="p">)</span>
            <span class="nx">ctx</span><span class="p">.</span><span class="nx">setFillStyle</span><span class="p">(</span><span class="dl">'</span><span class="s1">#000</span><span class="dl">'</span><span class="p">)</span>
          	<span class="c1">// 设置文字对齐方式</span>
            <span class="nx">ctx</span><span class="p">.</span><span class="nx">setTextAlign</span><span class="p">(</span><span class="dl">'</span><span class="s1">center</span><span class="dl">'</span><span class="p">)</span>
          	<span class="c1">// 绘制文字</span>
            <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
            <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="nx">code</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">180</span><span class="p">)</span>
          	<span class="c1">// 绘制图片 这里的img是base64字符串</span>
          	<span class="nx">ctx</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">250</span><span class="p">)</span>
          	<span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span><span class="p">(</span><span class="nx">desc</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">580</span><span class="p">)</span>
          	<span class="c1">// 开始绘制</span>
          	<span class="nx">ctx</span><span class="p">.</span><span class="nx">draw</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">Method</span><span class="p">();</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">src/pages/demo.cml</code>页面放入一个canvas标签</p>

<div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">btn-style=</span><span class="s">"background-color:#118EE9"</span> <span class="na">style=</span><span class="s">"margin: 0 auto"</span> <span class="na">type=</span><span class="s">"blue"</span> <span class="na">size=</span><span class="s">"big"</span> <span class="na">text=</span><span class="s">"保存图片"</span> <span class="na">c-bind:onclick=</span><span class="s">"saveImage"</span><span class="nt">&gt;&lt;/button&gt;</span>
	<span class="nt">&lt;canvas</span> <span class="na">style=</span><span class="s">"width: 500px; height: 700px;"</span> <span class="na">canvas-id=</span><span class="s">"qrcode"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>在保存图片按钮中调用多态协议中的方法，因为canvas只是用来转图片的，所以并不需要把它显示在页面上，页面上还是展示我用view画的样式，所以把它隐藏掉即可。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">html2ImageUtil</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../../../components/QuerySelector/index.interface</span><span class="dl">'</span>

<span class="nx">saveImage</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">html2ImageUtil</span><span class="p">.</span><span class="nx">saveImage</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">code</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">description</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">imageSrc</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="将canvas转为图片并保存">将canvas转为图片并保存</h3>

<p>将canvas转为图片需要用到<code class="language-plaintext highlighter-rouge">wx.canvasToTempFilePath</code>这个api，还是在<code class="language-plaintext highlighter-rouge">index.interface</code>里进行改动。canvas的draw方法里提供一个回调函数，可以在这里面进行转图片</p>

<div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">cml-type=</span><span class="s">"interface"</span><span class="nt">&gt;</span>
    <span class="kr">interface</span> <span class="nx">html2ImageInterface</span> <span class="p">{</span>
        <span class="nx">saveImage</span><span class="p">(</span><span class="nx">title</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">code</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">desc</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">img</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="k">void</span><span class="p">;</span>
    <span class="p">}</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>
<span class="nt">&lt;</span><span class="k">script</span> <span class="na">cml-type=</span><span class="s">"wx"</span><span class="nt">&gt;</span>
    <span class="kd">class</span> <span class="nx">Method</span> <span class="kr">implements</span> <span class="nx">html2ImageInterface</span> <span class="p">{</span>
        <span class="cm">/**
           * 
           * @param title 标题
           * @param code 合同号
           * @param desc 描述
           * @param img 二维码
           */</span>
        <span class="nx">saveImage</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">code</span><span class="p">,</span> <span class="nx">desc</span><span class="p">,</span> <span class="nx">img</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//此处省略绘制过程</span>
          	<span class="c1">// 开始绘制</span>
          	<span class="nx">ctx</span><span class="p">.</span><span class="nx">draw</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
              <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">wx</span><span class="p">.</span><span class="nx">canvasToTempFilePath</span><span class="p">({</span>
                  <span class="na">width</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
                  <span class="na">height</span><span class="p">:</span> <span class="mi">700</span><span class="p">,</span>
                  <span class="na">destWidth</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
                  <span class="na">destHeight</span><span class="p">:</span> <span class="mi">700</span><span class="p">,</span>
                  <span class="na">canvasId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">qrcode</span><span class="dl">'</span><span class="p">,</span>
                  <span class="nx">success</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
                    <span class="c1">// 绘制成功会返回一个res.tempFilePath，就是生成的图片路径，等下需要用到这个</span>
                  <span class="p">})</span>
            <span class="p">})</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">Method</span><span class="p">();</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>转成图片并且拿到图片路径之后，我们就可以把图片保存至相册了。要想保存至相册需要用户同意微信小程序访问相册的权限。</p>

<div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">cml-type=</span><span class="s">"interface"</span><span class="nt">&gt;</span>
    <span class="kr">interface</span> <span class="nx">html2ImageInterface</span> <span class="p">{</span>
        <span class="nx">saveImage</span><span class="p">(</span><span class="nx">title</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">code</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">desc</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">img</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="k">void</span><span class="p">;</span>
    <span class="p">}</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>
<span class="nt">&lt;</span><span class="k">script</span> <span class="na">cml-type=</span><span class="s">"wx"</span><span class="nt">&gt;</span>
    <span class="kd">class</span> <span class="nx">Method</span> <span class="kr">implements</span> <span class="nx">html2ImageInterface</span> <span class="p">{</span>
        <span class="cm">/**
           * 
           * @param title 标题
           * @param code 合同号
           * @param desc 描述
           * @param img 二维码
           */</span>
        <span class="nx">saveImage</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">code</span><span class="p">,</span> <span class="nx">desc</span><span class="p">,</span> <span class="nx">img</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//此处省略绘制过程</span>
          	<span class="c1">// 开始绘制</span>
          	<span class="nx">ctx</span><span class="p">.</span><span class="nx">draw</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
              <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">wx</span><span class="p">.</span><span class="nx">canvasToTempFilePath</span><span class="p">({</span>
                  <span class="na">width</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
                  <span class="na">height</span><span class="p">:</span> <span class="mi">700</span><span class="p">,</span>
                  <span class="na">destWidth</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
                  <span class="na">destHeight</span><span class="p">:</span> <span class="mi">700</span><span class="p">,</span>
                  <span class="na">canvasId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">qrcode</span><span class="dl">'</span><span class="p">,</span>
                  <span class="nx">success</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
                    <span class="c1">// 绘制成功会返回一个res.tempFilePath，就是生成的图片路径，等下需要用到这个</span>
                    <span class="kd">const</span> <span class="p">{</span> <span class="nx">tempFilePath</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">res</span>
                    <span class="nx">wx</span><span class="p">.</span><span class="nx">getSetting</span><span class="p">({</span>
                      <span class="nx">success</span><span class="p">(</span><span class="nx">res2</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">// 判断用户是否授权微信小程序访问相册</span>
                        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">res2</span><span class="p">.</span><span class="nx">authSetting</span><span class="p">[</span><span class="dl">'</span><span class="s1">scope.writePhotosAlbum</span><span class="dl">'</span><span class="p">])</span> <span class="p">{</span>
                          <span class="c1">// 没有则发起授权弹窗</span>
                          <span class="nx">wx</span><span class="p">.</span><span class="nx">authorize</span><span class="p">({</span>
                            <span class="na">scope</span><span class="p">:</span> <span class="dl">"</span><span class="s2">scope.writePhotosAlbum</span><span class="dl">"</span><span class="p">,</span>
                            <span class="nx">success</span> <span class="p">()</span> <span class="p">{</span>
                              <span class="c1">// 授权后将图片保存至相册</span>
                              <span class="nx">wx</span><span class="p">.</span><span class="nx">saveImageToPhotosAlbum</span><span class="p">({</span>
                                <span class="na">filePath</span><span class="p">:</span> <span class="nx">tempFilePath</span><span class="p">,</span>
                                <span class="nx">success</span><span class="p">()</span> <span class="p">{</span>
                                  <span class="c1">// 保存成功</span>
                                <span class="p">}</span>
                              <span class="p">})</span>
                            <span class="p">}</span>
                          <span class="p">})</span>
                        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                          <span class="c1">// 授权后将图片保存至相册</span>
                          <span class="nx">wx</span><span class="p">.</span><span class="nx">saveImageToPhotosAlbum</span><span class="p">({</span>
                            <span class="na">filePath</span><span class="p">:</span> <span class="nx">tempFilePath</span><span class="p">,</span>
                            <span class="nx">success</span><span class="p">()</span> <span class="p">{</span>
                              <span class="c1">// 保存成功</span>
                            <span class="p">}</span>
                          <span class="p">})</span>
                        <span class="p">}</span>
                      <span class="p">}</span>
                    <span class="p">})</span>
                  <span class="p">})</span>
            <span class="p">})</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">Method</span><span class="p">();</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>
</code></pre></div></div>

<h3 id="第二个坑来咯">第二个坑来咯</h3>

<p>到这里似乎蛮顺利的，试一下，我的mac可以弹出保存窗口了。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315141215308.png" alt="image-20210315141215308" style="zoom:50%;" /></p>

<p>而且保存下来的图片也挺正常的。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315141251304.png" alt="image-20210315141251304" style="zoom:50%;" /></p>

<p>可以开开心心的进行真机调试了，当我打开手机，进入页面，保存图片，一切非常顺利，然后当我打开相册我人傻了。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315141457517.png" alt="image-20210315141457517" style="zoom:50%;" /></p>

<p>？？？就邪门，二维码咋没了。难道是我姿势不对？然后我又单手倒立试了一次，依然是没有二维码，看来跟我姿势没关系。作为一名自身的百度工程师，最后还是被我查到了原因。</p>

<p>base64直接在canvas上绘制，在真机上是显示不出来的。。。。。。</p>

<p>这种情况解决办法有两种：</p>

<ol>
  <li>让后端直接返回图片url，使用<code class="language-plaintext highlighter-rouge">wx.getImageInfo</code>将图片的网络地址缓存到本地，它会返回一个本地地址，然后使用这个地址把图片绘制到canvas上面。</li>
  <li>依然使用base64，手动把base64转成图片并存到本地，在拿这个本地地址去绘制到canvas上面。</li>
</ol>

<p>这里我用的第二种，因为我懒得去麻烦后端了。要在<code class="language-plaintext highlighter-rouge">ctx.drawImage(img, 125, 250, 250, 250)</code>之前，处理下这个img。</p>

<div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">script</span> <span class="na">cml-type=</span><span class="s">"interface"</span><span class="nt">&gt;</span>
    <span class="kr">interface</span> <span class="nx">html2ImageInterface</span> <span class="p">{</span>
        <span class="nx">saveImage</span><span class="p">(</span><span class="nx">title</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">code</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">desc</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">img</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="k">void</span><span class="p">;</span>
    <span class="p">}</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>
<span class="nt">&lt;</span><span class="k">script</span> <span class="na">cml-type=</span><span class="s">"wx"</span><span class="nt">&gt;</span>
    <span class="kd">class</span> <span class="nx">Method</span> <span class="kr">implements</span> <span class="nx">html2ImageInterface</span> <span class="p">{</span>
        <span class="cm">/**
           * 
           * @param title 标题
           * @param code 合同号
           * @param desc 描述
           * @param img 二维码
           */</span>
        <span class="nx">saveImage</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">code</span><span class="p">,</span> <span class="nx">desc</span><span class="p">,</span> <span class="nx">img</span><span class="p">)</span> <span class="p">{</span>
          	<span class="c1">// 此处省略绘制图片之外的过程</span>
          
          	<span class="c1">// 文件管理对象</span>
          	<span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">wx</span><span class="p">.</span><span class="nx">getFileSystemManager</span><span class="p">();</span>
          	<span class="c1">// 分别获取图片后缀和图片base64内容</span>
            <span class="kd">const</span> <span class="p">[,</span> <span class="nx">format</span><span class="p">,</span> <span class="nx">bodyData</span><span class="p">]</span> <span class="o">=</span> <span class="sr">/data:image</span><span class="se">\/(\w</span><span class="sr">+</span><span class="se">)</span><span class="sr">;base64,</span><span class="se">(</span><span class="sr">.*</span><span class="se">)</span><span class="sr">/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">img</span><span class="p">)</span> <span class="o">||</span> <span class="p">[];</span>
            <span class="kd">const</span> <span class="nx">times</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
          	<span class="c1">// 自定义本地图片路径 时间戳+图片后缀</span>
            <span class="kd">const</span> <span class="nx">imgSrc</span> <span class="o">=</span> <span class="nx">wx</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">USER_DATA_PATH</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">times</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">.</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">format</span><span class="p">;</span>
          	<span class="c1">// 将Base64字符串转成ArrayBuffer对象</span>
            <span class="kd">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">wx</span><span class="p">.</span><span class="nx">base64ToArrayBuffer</span><span class="p">(</span><span class="nx">bodyData</span><span class="p">);</span>
          	<span class="c1">// 保存文件</span>
          	<span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">({</span>
                <span class="na">filePath</span><span class="p">:</span> <span class="nx">imgSrc</span><span class="p">,</span>
                <span class="na">data</span><span class="p">:</span> <span class="nx">buffer</span><span class="p">,</span>
                <span class="na">encoding</span><span class="p">:</span> <span class="dl">'</span><span class="s1">binary</span><span class="dl">'</span><span class="p">,</span>
                <span class="nx">success</span><span class="p">()</span> <span class="p">{</span>
                  <span class="c1">// 绘制图片 这里不再使用base64，直接传入上面生成的imgSrc</span>
          				<span class="nx">ctx</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">imgSrc</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">250</span><span class="p">)</span>
                  
                  <span class="c1">// 此处省略将canvas转为图片并保存过程</span>
                <span class="p">})</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">Method</span><span class="p">();</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>再次真机调试，一切ok。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315143549265.png" alt="image-20210315143549265" style="zoom:50%;" /></p>

<h2 id="总结">总结</h2>

<p>微信开发者工具真垃圾！！！</p>]]></content><author><name>Ricardo</name></author><category term="前端" /><category term="微信小程序" /><summary type="html"><![CDATA[前言：这玩意是真的坑]]></summary></entry><entry><title type="html">Mac下使用Charles抓包工具</title><link href="/%E5%B7%A5%E5%85%B7/%E4%BD%BF%E7%94%A8Charles%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7/" rel="alternate" type="text/html" title="Mac下使用Charles抓包工具" /><published>2021-03-15T00:00:00+00:00</published><updated>2021-03-15T12:31:09+00:00</updated><id>/%E5%B7%A5%E5%85%B7/%E4%BD%BF%E7%94%A8Charles%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7</id><content type="html" xml:base="/%E5%B7%A5%E5%85%B7/%E4%BD%BF%E7%94%A8Charles%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7/"><![CDATA[<h2 id="介绍">介绍</h2>

<p><a href="https://www.charlesproxy.com/">Charles</a>是Mac下常用的网络封包截取工具，在做移动开发时，我们为了调试与服务器的网络通讯协议，常常需要截取网络封包进行分析。除了在做移动开发中调试端口外，Charles 也可以用于分析第三方应用的通讯协议。配合 Charles 的 SSL 功能，Charles还可以分析 Https 协议。</p>

<p>Charles 通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。</p>

<h2 id="下载">下载</h2>

<p>这玩意收费，给你萌个破解版</p>

<ol>
  <li>
    <p>百度云下载地址：<a href="https://pan.baidu.com/s/1U6oGu61qH30YyJvcFAMg4w"> https://pan.baidu.com/s/1U6oGu61qH30YyJvcFAMg4w </a>（网盘提取密码：9ybz）</p>
  </li>
  <li>
    <p>DMG 安装包打开密码 www.ifunmac.com</p>
  </li>
  <li>
    <p>运行软件后，使用下面的注册信息激活即可：
￼Registered Name：macenjoy.co
￼License Key：BBF36640E8D382CAA3</p>
  </li>
</ol>

<h2 id="界面">界面</h2>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315165625446.png" alt="image-20210315165625446" style="zoom: 33%;" /></p>

<h2 id="pc端抓包">PC端抓包</h2>

<p>macOS Proxy是默认勾选的，一打开Charles就开始抓取了。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315214145574.png" alt="image-20210315214145574" style="zoom: 33%;" /></p>

<p>但是你会发现http接口是正常的，而https接口返回的报文却是乱码。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315214527583.png" alt="image-20210315214527583" style="zoom: 33%;" /></p>

<p>通过查看Notes提示需要配置代理。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315215009924.png" alt="image-20210315215009924" style="zoom: 33%;" /></p>

<p>在Proxy→SSL Proxying Setting中include添加规则，这里我配置的<code class="language-plaintext highlighter-rouge">*.*</code></p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315215240948.png" alt="image-20210315215240948" style="zoom:33%;" /></p>

<p>重启Charles，依然报错，Notes提示需要安装根证书。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315215337622.png" alt="image-20210315215337622" style="zoom:33%;" /></p>

<p>选择Help→SSL Proxying→Install Charles Root Certificate选项，在弹出的钥匙传中，双击该证书，选择信任。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315215545672.png" alt="image-20210315215545672" style="zoom:33%;" /></p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315215602140.png" alt="image-20210315215602140" style="zoom:33%;" /></p>

<p>重启Charles，https封包抓取正常。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315215741462.png" alt="image-20210315215741462" style="zoom: 33%;" /></p>

<h2 id="移动端抓包">移动端抓包</h2>

<p>我手头只有iOS设备，这里只演示iOS端，其实Android端设置也差不多。</p>

<p>首先手机和电脑必须在同一个局域网内，在Proxy→Proxy Settings选项卡中配置端口号，这里我配的8889</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315220039707.png" alt="image-20210315220039707" style="zoom: 33%;" /></p>

<p>然后打开手机WLAN，点击已连接WIFI右侧的感叹号。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315220258998.png" alt="image-20210315220258998" style="zoom: 33%;" /></p>

<p>进入页面后在最下面有一个HTTP代理-配置代理选项，选择手动，在服务器和端口分别输入电脑的ip和端口，最后点击存储。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315220543886.png" alt="image-20210315220543886" style="zoom: 33%;" /></p>

<p>这是电脑会弹出一个窗口，选择allow。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315220644713.png" alt="image-20210315220644713" style="zoom:50%;" /></p>

<p>同样，移动端也需要安装证书，打开浏览器输入chls.pro/ssl，下载证书，安装证书。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315221147879.png" alt="image-20210315221147879" style="zoom:33%;" /></p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315221159150.png" alt="image-20210315221159150" style="zoom:33%;" /></p>

<p>这时候就可以正常抓取http和https请求了。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20210315221350339.png" alt="image-20210315221350339" style="zoom:33%;" /></p>]]></content><author><name>Ricardo</name></author><category term="工具" /><category term="工具" /><summary type="html"><![CDATA[介绍]]></summary></entry><entry><title type="html">记一次前端项目优化实战</title><link href="/%E5%89%8D%E7%AB%AF/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/" rel="alternate" type="text/html" title="记一次前端项目优化实战" /><published>2020-08-06T00:00:00+00:00</published><updated>2020-08-06T23:26:59+00:00</updated><id>/%E5%89%8D%E7%AB%AF/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98</id><content type="html" xml:base="/%E5%89%8D%E7%AB%AF/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/"><![CDATA[<h2 id="前言">前言</h2>

<p>前几天接到某项目的一个前端问题，一个移动端的H5页面，用手机4G网打开加载要十几秒，长达十几秒的白屏让用户接受不了。第二天就跑去现场看了下问题，然后给这个项目做了一些优化，晚上回来就想着把这事给记下来整理成文档，希望能给大家在前端项目优化上有所帮助。</p>

<h2 id="问题收集">问题收集</h2>

<p>在拿到代码还有去现场之前，就拿到了以下几个问题：</p>

<ul>
  <li>所有手机都会出现这个问题，我这边的三星，苹果还有客户的华为折叠屏都有这种情况。</li>
  <li>安卓和ios在清理缓存重新打开应用后会出现这个问题。</li>
  <li>这边的情况是在用4G网的情况下，清理手机缓存后有很大的几率会出现这个问题，这个问题是显示空白页面，无法显示内容，跟群里的截图一样。在用WiFi的情况下，清理手机缓存，然后再进应用第一次加载比较慢，但是能进去，跟前面的进不去问题不一样。</li>
</ul>

<h2 id="问题分析">问题分析</h2>

<p>拿到这几个问题之后我首先想到这几个点：</p>

<ul>
  <li>接口慢</li>
  <li>网络慢</li>
  <li>静态资源、js体积大导致加载慢</li>
</ul>

<p>后来拿到url地址之后，我用微信开发者工具看了一下，这个微信开发者工具那来看移动端页面还是蛮方便的。我的电脑用的是WiFi（我这WiFi网速只有450k/s左右），发现加载确实有点慢，用了4s多。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200807000002229.png" alt="image-20200807000002229" /></p>

<p>然后我把网络切到Fast 3G，页面加载完花费了11s。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200807000151218.png" alt="image-20200807000151218" /></p>

<p>从图中可以看到，一个js文件达到了1.6M，WiFi下加载了4s多，问了下他们那边服务器有用到Gzip压缩，也就是说这个js原本比我们现在看到的还要大，然后找他们拿到了部署在服务器上的前端包，我发现这个js有4.8M。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200807001417531.png" alt="image-20200807001417531" /></p>

<p>看到这只能去拿代码分析了，我怀疑可能是引入了不必要的依赖导致的。</p>

<h2 id="webpack插件webpack-bundle-analyzer">webpack插件：webpack-bundle-analyzer</h2>

<p>分析代码之前，先讲一下这个东西，webpack-bundle-analyzer是一款webpack的可视化资源分析工具。它能够帮助我们真正的了解到包里的内容，并且能展示出各个模块在包里所占用的空间大小，最终能够帮助我们优化它。</p>

<h3 id="安装依赖">安装依赖</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># npm</span>
<span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">--save-dev</span> webpack-bundle-analyzer
<span class="c"># yarn</span>
<span class="nv">$ </span>yarn add <span class="nt">-D</span> webpack-bundle-analyzer
</code></pre></div></div>

<h3 id="作为插件使用">作为插件使用</h3>

<p>在webpack.config.js中：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">BundleAnalyzerPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">webpack-bundle-analyzer</span><span class="dl">'</span><span class="p">).</span><span class="nx">BundleAnalyzerPlugin</span><span class="p">;</span>
 
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nx">BundleAnalyzerPlugin</span><span class="p">()</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在package.json的scripts里加入下面这条命令，就可以npm run build之后看到webpack-bundle-analyzer的效果：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"analyz"</span><span class="p">:</span><span class="w"> </span><span class="s2">"NODE_ENV=production npm_config_report=true npm run build"</span><span class="w">
</span></code></pre></div></div>

<p>运行npm run build后弹出的页面（官方效果图）：</p>

<p><img src="https://figure-b.ricardolsw.com/image/bVLS7n.gif" alt="93f72404-b338-11e6-92d4-9a365550a701.gif" /></p>

<p>我们可以通过使用webpack-bundle-analyzer可以看到项目各模块的大小，可以按需优化。</p>

<h2 id="分析代码">分析代码</h2>

<p>接下来我们看代码，这是用Chameleon框架开发的页面，刚好cml框架已经集成了webpack-bundle-analyzer功能，可以直接使用。</p>

<p>在<code class="language-plaintext highlighter-rouge">chameleon.config.js</code>里web属性下面的dev和build里都加上<code class="language-plaintext highlighter-rouge">analysis: true</code>来开启资源分析工具：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">web</span><span class="p">:</span> <span class="p">{</span>
  <span class="nl">dev</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">analysis</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="nx">build</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">analysis</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nx">publicPath</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200807221741430.png" alt="image-20200807221741430" /></p>

<p>这样在本地运行还有打包的时候都可以进行资源分析。</p>

<p>运行<code class="language-plaintext highlighter-rouge">cml web dev</code>启动项目，启动成功后会跟上面讲的一样弹出这样一个页面：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200807223020644.png" alt="image-20200807223020644" /></p>

<p>当我看到@antv和ant-design-vue这两个依赖时我就感到非常困惑，这是一个移动端项目，我想怎么着也不会用到ant-design-vue和@antv这两个依赖吧，因为我还看到有用到vant这个移动端UI组件库，在项目中全局搜索了下这两个依赖，发现在app.cml这个文件中有import这两个依赖。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200807225308228.png" alt="image-20200807225308228" /></p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200807225331352.png" alt="image-20200807225331352" /></p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200807225352186.png" alt="image-20200807225352186" /></p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200807225432399.png" alt="image-20200807225432399" /></p>

<p>然而在这些地方引入之后，我在项目其他页面并没有发现有用到这两个依赖的任何内容，也就是说这俩依赖并没有被使用到，但是却在构建的时候被扔进了包里，然后这俩依赖就无缘无故的占用了一般的包大小。</p>

<p>在我注释掉这些没用的引用之后再次运行，通过分析页面可以看出这两个依赖就不存在了：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200807230619704.png" alt="image-20200807230619704" /></p>

<p>顺藤摸瓜，根据package.json的依赖列表进行逐一排查，依次去掉所有不必要的依赖引入。突然心血来潮，我用编辑器察看了下打包好的js文件，发现了一些被转成base64的图片，然后看了下Chameleon的文档，发现在引入静态资源目录里的图片时在url后面加上了?_inline会被转成base64。</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200807232352886.png" alt="image-20200807232352886" /></p>

<p>由于时间原因，就只做了这两方面的优化，最终打出来的包体积也非常可观，只有800k左右：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200807232741729.png" alt="image-20200807232741729" /></p>

<p>再部署到服务器上使用Gzip压缩后页面加载速度还是很不错的：</p>

<p><img src="https://figure-b.ricardolsw.com/image/image-20200807232938491.png" alt="image-20200807232938491" /></p>

<h2 id="写在最后">写在最后</h2>

<p>这次优化并没有完全做完，还有很多的点，例如vant组件在代码里是被全部引入的，可以改为按需引入，在代码里还有大量被import却没有使用的包，虽然最终不会压缩进js里，但还是建议去掉这些不必要的import。还有路由懒加载、图片压缩、删除未使用的CSS等等</p>]]></content><author><name>Ricardo</name></author><category term="前端" /><category term="Webpack" /><summary type="html"><![CDATA[前言]]></summary></entry><entry><title type="html">Flutter：WebSocket封装-实现心跳、重连机制</title><link href="/blog/Flutter-WebSocket%E5%B0%81%E8%A3%85-%E5%AE%9E%E7%8E%B0%E5%BF%83%E8%B7%B3-%E9%87%8D%E8%BF%9E%E6%9C%BA%E5%88%B6/" rel="alternate" type="text/html" title="Flutter：WebSocket封装-实现心跳、重连机制" /><published>2020-07-27T00:00:00+00:00</published><updated>2020-07-27T15:58:02+00:00</updated><id>/blog/Flutter%EF%BC%9AWebSocket%E5%B0%81%E8%A3%85-%E5%AE%9E%E7%8E%B0%E5%BF%83%E8%B7%B3%E3%80%81%E9%87%8D%E8%BF%9E%E6%9C%BA%E5%88%B6</id><content type="html" xml:base="/blog/Flutter-WebSocket%E5%B0%81%E8%A3%85-%E5%AE%9E%E7%8E%B0%E5%BF%83%E8%B7%B3-%E9%87%8D%E8%BF%9E%E6%9C%BA%E5%88%B6/"><![CDATA[<h3 id="前言">前言</h3>

<ol>
  <li>
    <p>Flutter简介</p>

    <p>Flutter 是 Google推出并开源的移动应用开发框架，主打跨平台、高保真、高性能。开发者可以通过 Dart语言开发 App，一套代码同时运行在 iOS 和 Android平台。 Flutter提供了丰富的组件、接口，开发者可以很快地为 Flutter添加 native扩展。同时 Flutter还使用 Native引擎渲染视图，这无疑能为用户提供良好的体验。</p>
  </li>
  <li>
    <p>WebSocket简介</p>

    <p>Http协议是无状态的，只能由客户端主动发起，服务端再被动响应，服务端无法向客户端主动推送内容，并且一旦服务器响应结束，链接就会断开(见注解部分)，所以无法进行实时通信。WebSocket协议正是为解决客户端与服务端实时通信而产生的技术，现在已经被主流浏览器支持，所以对于Web开发者来说应该比较熟悉了，Flutter也提供了专门的包来支持WebSocket协议。</p>

    <blockquote>
      <p>注意：Http协议中虽然可以通过keep-alive机制使服务器在响应结束后链接会保持一段时间，但最终还是会断开，keep-alive机制主要是用于避免在同一台服务器请求多个资源时频繁创建链接，它本质上是支持链接复用的技术，而并非用于实时通信，读者需要知道这两者的区别。</p>
    </blockquote>

    <p>WebSocket协议本质上是一个基于tcp的协议，它是先通过HTTP协议发起一条特殊的http请求进行握手后，如果服务端支持WebSocket协议，则会进行协议升级。WebSocket会使用http协议握手后创建的tcp链接，和http协议不同的是，WebSocket的tcp链接是个长链接（不会断开），所以服务端与客户端就可以通过此TCP连接进行实时通信。有关WebSocket协议细节，读者可以看RFC文档，下面我们重点看看Flutter中如何使用WebSocket。</p>
  </li>
</ol>

<h3 id="话不多说直接撸代码">话不多说，直接撸代码</h3>

<p>添加依赖：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">web_socket_channel</span><span class="pi">:</span> <span class="s">^1.1.0</span> <span class="c1"># WebSocket</span>
</code></pre></div></div>

<p>新建<code class="language-plaintext highlighter-rouge">web_socket_utility.dart</code>工具类：</p>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'dart:async'</span><span class="o">;</span>

<span class="kn">import</span> <span class="s">'package:web_socket_channel/io.dart'</span><span class="o">;</span>
<span class="kn">import</span> <span class="s">'package:web_socket_channel/web_socket_channel.dart'</span><span class="o">;</span>

<span class="c1">/// WebSocket地址</span>
<span class="kd">const</span> <span class="kt">String</span> <span class="n">_SOCKET_URL</span> <span class="o">=</span> <span class="s">'ws://121.40.165.18:8800'</span><span class="p">;</span>

<span class="c1">/// WebSocket状态</span>
<span class="kt">enum</span> <span class="n">SocketStatus</span> <span class="p">{</span>
  <span class="n">SocketStatusConnected</span><span class="p">,</span> <span class="c1">// 已连接</span>
  <span class="n">SocketStatusFailed</span><span class="p">,</span> <span class="c1">// 失败</span>
  <span class="n">SocketStatusClosed</span><span class="p">,</span> <span class="c1">// 连接关闭</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">WebSocketUtility</span> <span class="p">{</span>
  <span class="c1">/// 单例对象</span>
  <span class="kd">static</span> <span class="n">WebSocketUtility</span> <span class="n">_socket</span><span class="p">;</span>

  <span class="c1">/// 内部构造方法，可避免外部暴露构造函数，进行实例化</span>
  <span class="n">WebSocketUtility</span><span class="o">.</span><span class="na">_</span><span class="p">();</span>

  <span class="c1">/// 获取单例内部方法</span>
  <span class="kd">factory</span> <span class="n">WebSocketUtility</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 只能有一个实例</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_socket</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">_socket</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebSocketUtility</span><span class="o">.</span><span class="na">_</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">_socket</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">IOWebSocketChannel</span> <span class="n">_webSocket</span><span class="p">;</span> <span class="c1">// WebSocket</span>
  <span class="n">SocketStatus</span> <span class="n">_socketStatus</span><span class="p">;</span> <span class="c1">// socket状态</span>
  <span class="n">Timer</span> <span class="n">_heartBeat</span><span class="p">;</span> <span class="c1">// 心跳定时器</span>
  <span class="kt">num</span> <span class="n">_heartTimes</span> <span class="o">=</span> <span class="mi">3000</span><span class="p">;</span> <span class="c1">// 心跳间隔(毫秒)</span>
  <span class="kt">num</span> <span class="n">_reconnectCount</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span> <span class="c1">// 重连次数，默认60次</span>
  <span class="kt">num</span> <span class="n">_reconnectTimes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 重连计数器</span>
  <span class="n">Timer</span> <span class="n">_reconnectTimer</span><span class="p">;</span> <span class="c1">// 重连定时器</span>
  <span class="kt">Function</span> <span class="n">onError</span><span class="p">;</span> <span class="c1">// 连接错误回调</span>
  <span class="kt">Function</span> <span class="n">onOpen</span><span class="p">;</span> <span class="c1">// 连接开启回调</span>
  <span class="kt">Function</span> <span class="n">onMessage</span><span class="p">;</span> <span class="c1">// 接收消息回调</span>

  <span class="c1">/// 初始化WebSocket</span>
  <span class="kt">void</span> <span class="n">initWebSocket</span><span class="p">({</span><span class="kt">Function</span> <span class="n">onOpen</span><span class="p">,</span> <span class="kt">Function</span> <span class="n">onMessage</span><span class="p">,</span> <span class="kt">Function</span> <span class="n">onError</span><span class="p">})</span> <span class="p">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">onOpen</span> <span class="o">=</span> <span class="n">onOpen</span><span class="p">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">onMessage</span> <span class="o">=</span> <span class="n">onMessage</span><span class="p">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">onError</span> <span class="o">=</span> <span class="n">onError</span><span class="p">;</span>
    <span class="n">openSocket</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="c1">/// 开启WebSocket连接</span>
  <span class="kt">void</span> <span class="n">openSocket</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">closeSocket</span><span class="p">();</span>
    <span class="n">_webSocket</span> <span class="o">=</span> <span class="n">IOWebSocketChannel</span><span class="o">.</span><span class="na">connect</span><span class="p">(</span><span class="n">_SOCKET_URL</span><span class="p">);</span>
    <span class="n">print</span><span class="p">(</span><span class="s">'WebSocket连接成功: </span><span class="si">$_SOCKET_URL</span><span class="s">'</span><span class="p">);</span>
    <span class="c1">// 连接成功，返回WebSocket实例</span>
    <span class="n">_socketStatus</span> <span class="o">=</span> <span class="n">SocketStatus</span><span class="o">.</span><span class="na">SocketStatusConnected</span><span class="p">;</span>
    <span class="c1">// 连接成功，重置重连计数器</span>
    <span class="n">_reconnectTimes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_reconnectTimer</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">_reconnectTimer</span><span class="o">.</span><span class="na">cancel</span><span class="p">();</span>
      <span class="n">_reconnectTimer</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">onOpen</span><span class="p">();</span>
    <span class="c1">// 接收消息</span>
    <span class="n">_webSocket</span><span class="o">.</span><span class="na">stream</span><span class="o">.</span><span class="na">listen</span><span class="p">((</span><span class="n">data</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">webSocketOnMessage</span><span class="p">(</span><span class="n">data</span><span class="p">),</span>
        <span class="nl">onError:</span> <span class="n">webSocketOnError</span><span class="p">,</span> <span class="nl">onDone:</span> <span class="n">webSocketOnDone</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">/// WebSocket接收消息回调</span>
  <span class="n">webSocketOnMessage</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">onMessage</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">/// WebSocket关闭连接回调</span>
  <span class="n">webSocketOnDone</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">print</span><span class="p">(</span><span class="s">'closed'</span><span class="p">);</span>
    <span class="n">reconnect</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="c1">/// WebSocket连接错误回调</span>
  <span class="n">webSocketOnError</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">WebSocketChannelException</span> <span class="n">ex</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
    <span class="n">_socketStatus</span> <span class="o">=</span> <span class="n">SocketStatus</span><span class="o">.</span><span class="na">SocketStatusFailed</span><span class="p">;</span>
    <span class="n">onError</span><span class="p">(</span><span class="n">ex</span><span class="o">.</span><span class="na">message</span><span class="p">);</span>
    <span class="n">closeSocket</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="c1">/// 初始化心跳</span>
  <span class="kt">void</span> <span class="n">initHeartBeat</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">destroyHeartBeat</span><span class="p">();</span>
    <span class="n">_heartBeat</span> <span class="o">=</span>
        <span class="k">new</span> <span class="n">Timer</span><span class="o">.</span><span class="na">periodic</span><span class="p">(</span><span class="n">Duration</span><span class="p">(</span><span class="nl">milliseconds:</span> <span class="n">_heartTimes</span><span class="p">),</span> <span class="p">(</span><span class="n">timer</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">sentHeart</span><span class="p">();</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="c1">/// 心跳</span>
  <span class="kt">void</span> <span class="n">sentHeart</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">sendMessage</span><span class="p">(</span><span class="s">'{"module": "HEART_CHECK", "message": "请求心跳"}'</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">/// 销毁心跳</span>
  <span class="kt">void</span> <span class="n">destroyHeartBeat</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_heartBeat</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">_heartBeat</span><span class="o">.</span><span class="na">cancel</span><span class="p">();</span>
      <span class="n">_heartBeat</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">/// 关闭WebSocket</span>
  <span class="kt">void</span> <span class="n">closeSocket</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_webSocket</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">print</span><span class="p">(</span><span class="s">'WebSocket连接关闭'</span><span class="p">);</span>
      <span class="n">_webSocket</span><span class="o">.</span><span class="na">sink</span><span class="o">.</span><span class="na">close</span><span class="p">();</span>
      <span class="n">destroyHeartBeat</span><span class="p">();</span>
      <span class="n">_socketStatus</span> <span class="o">=</span> <span class="n">SocketStatus</span><span class="o">.</span><span class="na">SocketStatusClosed</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">/// 发送WebSocket消息</span>
  <span class="kt">void</span> <span class="n">sendMessage</span><span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_webSocket</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">switch</span> <span class="p">(</span><span class="n">_socketStatus</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">SocketStatus</span><span class="o">.</span><span class="na">SocketStatusConnected</span><span class="o">:</span>
          <span class="n">print</span><span class="p">(</span><span class="s">'发送中：'</span> <span class="o">+</span> <span class="n">message</span><span class="p">);</span>
          <span class="n">_webSocket</span><span class="o">.</span><span class="na">sink</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
          <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="n">SocketStatus</span><span class="o">.</span><span class="na">SocketStatusClosed</span><span class="o">:</span>
          <span class="n">print</span><span class="p">(</span><span class="s">'连接已关闭'</span><span class="p">);</span>
          <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="n">SocketStatus</span><span class="o">.</span><span class="na">SocketStatusFailed</span><span class="o">:</span>
          <span class="n">print</span><span class="p">(</span><span class="s">'发送失败'</span><span class="p">);</span>
          <span class="k">break</span><span class="p">;</span>
        <span class="k">default</span><span class="o">:</span>
          <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">/// 重连机制</span>
  <span class="kt">void</span> <span class="n">reconnect</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_reconnectTimes</span> <span class="p">&lt;</span> <span class="n">_reconnectCount</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">_reconnectTimes</span><span class="o">++</span><span class="p">;</span>
      <span class="n">_reconnectTimer</span> <span class="o">=</span>
          <span class="k">new</span> <span class="n">Timer</span><span class="o">.</span><span class="na">periodic</span><span class="p">(</span><span class="n">Duration</span><span class="p">(</span><span class="nl">milliseconds:</span> <span class="n">_heartTimes</span><span class="p">),</span> <span class="p">(</span><span class="n">timer</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">openSocket</span><span class="p">();</span>
      <span class="p">});</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">_reconnectTimer</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">print</span><span class="p">(</span><span class="s">'重连次数超过最大次数'</span><span class="p">);</span>
        <span class="n">_reconnectTimer</span><span class="o">.</span><span class="na">cancel</span><span class="p">();</span>
        <span class="n">_reconnectTimer</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="使用方法">使用方法</h3>

<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="s">'package:my_app/utils/web_socket_utility.dart'</span><span class="o">;</span>

<span class="n">WebSocketUtility</span><span class="p">()</span><span class="o">.</span><span class="na">initWebSocket</span><span class="p">(</span><span class="nl">onOpen:</span> <span class="p">()</span> <span class="p">{</span>
  <span class="n">WebSocketUtility</span><span class="p">()</span><span class="o">.</span><span class="na">initHeartBeat</span><span class="p">();</span>
<span class="p">},</span> <span class="nl">onMessage:</span> <span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
<span class="p">},</span> <span class="nl">onError:</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>]]></content><author><name>Ricardo</name></author><category term="Blog" /><category term="Flutter" /><category term="Dart" /><summary type="html"><![CDATA[前言]]></summary></entry><entry><title type="html">你必须知道的Git分支开发规范</title><link href="/%E5%B7%A5%E5%85%B7/%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84Git%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/" rel="alternate" type="text/html" title="你必须知道的Git分支开发规范" /><published>2020-07-02T00:00:00+00:00</published><updated>2020-07-02T10:43:31+00:00</updated><id>/%E5%B7%A5%E5%85%B7/%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84Git%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83</id><content type="html" xml:base="/%E5%B7%A5%E5%85%B7/%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84Git%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"><![CDATA[<h3 id="分支管理">分支管理</h3>

<h4 id="分支命名">分支命名</h4>

<h5 id="master-分支">master 分支</h5>

<ul>
  <li>master 分支为主分支，用于部署生产环境，需要确保master分支的稳定性。</li>
  <li>此分支属于只读分支，只能从 release 分支合并过来，任何时候都不能在此分支修改代码。</li>
  <li>所有向master分支的推送，都要打上tag标签记录，方便追溯。</li>
  <li>此分支只能前进，不能有回退操作。</li>
</ul>

<h5 id="hotfix-分支">hotfix/* 分支</h5>

<ul>
  <li>生产环境 bug 修复分支，基于 master 分支检出。</li>
  <li>属于临时分支，当生产环境出现 bug ，管理员基于 tag 创建 hotfix/<修改者> 分支、 release/<版本号> 分支，由开发人员在hotfix分支修复bug，修复完成后，并且在开发集成环境自测通过、单元测试通过、Sona扫描通过后，再向 release 分支提交 pull request 申请。bug修复完成上线之后可删除此分支。</版本号></修改者></li>
</ul>

<h5 id="release-分支">release/* 分支</h5>

<ul>
  <li>release 分支为预上线分支，基于 develop 或 master 分支检出。用于准备发布新阶段版本或者修复线上bug版本。</li>
  <li>此分支用于上线前bug测试，文档生成和其他面向发布任务。</li>
  <li>此分支属于只读分支，只能由 master 分支或者 develop 分支检出，或者从 bugfix 分支、hotfix 分支合并过来，任何时候都不能在此分支修改代码。</li>
  <li>此分支属于临时分支，在发布提测阶段，会以 release 分支代码为基准提测。当 release 分支测试验证通过后，最终会先被合并到 master 分支（发布新版本或者修复线上bug，要打tag标签），再被合并到 develop 分支（使其与 master 分支保持一致），最后删除此分支。</li>
  <li>命名：release/<版本号>（例：release/1.0.0）</版本号></li>
</ul>

<h5 id="bugfix-分支">bugfix/* 分支</h5>

<ul>
  <li>预上线 bug 修复分支，基于 release 分支检出。</li>
  <li>此分支用于上线前bug修复。</li>
  <li>此分支属于临时分支，当提测阶段中存在 bug 需要修复，由开发人员基于 release 分支创建 bugfix/<修改者> 分支，然后在 bugfix/<修改者> 分支进行修复 bug 。 bug 修复完成后，并且在开发集成环境自测通过、单元测试通过、Sona扫描通过后，再向 release 分支提交 pull request 申请。bug修复完成 release 分支测试通过之后可删除此分支。</修改者></修改者></li>
</ul>

<h5 id="develop-分支">develop 分支</h5>

<ul>
  <li>develop 为开发环境主干分支，基于 master 分支检出。</li>
  <li>此分支为只读分支，只能从master、release、feature分支合并过来，任何时候都不能在此分支修改代码。</li>
  <li>此分支只能由开发人员提交 pull request（需要 code review），或者由管理员 merge release 分支。</li>
  <li>在一个 release 分支没有创建出来时，develop 分支不能合并不包含 release 功能范围的  feature 分支。develop 分支在特殊情况下可以回退版本。</li>
</ul>

<h5 id="feature-分支">feature/* 分支</h5>

<ul>
  <li>feature 分支为功能开发分支，由开发人员基于 develop 分支创建 feature/<功能模块> 分支。</功能模块></li>
  <li>此分支用于新功能开发，一个 feature 分支最大粒度只能到模块。</li>
  <li>此分支为临时分支，最终会被合并到 develop 分支（新增功能），或者删除（放弃功能）。</li>
  <li>此分支通常仅存在于开发人员本地存储库中，而不存在与远程origin。</li>
  <li>一个新功能开发完成后，且在开发集成环境自测通过、单元测试通过、Sona扫描通过后，才能向 develop 分支提交 pull request （需要 code review）。</li>
</ul>

<h4 id="关于gitflow">关于gitflow</h4>

<p>gitflow 是一个标准分支规范和pr流程，但是在微服务的发展过程中，协同编码的场景已经很少了，所以如果代码只有个人维护 不需要严格按照 gitflow，大体流程按照如上规则即可。但是协同编码需要严格遵守gitflow，提升协同编码的效率。</p>

<p><img src="https://figure-b.ricardolsw.com/image/wsr3P16PNk7lUcl2Q5kVVWg7GLD6MKdH.jpg?x-oss-process=style/watermark" alt="avatar" /></p>

<h3 id="git版本号">git版本号</h3>

<p>git采用的是三位不版本号：主版本号.次版本号.修订号</p>

<ul>
  <li>主版本号：做了一些不兼容的API修改，可以理解为一个大的产品更新。</li>
  <li>次版本号：新增了一些功能，可以理解为合并了一个feature。</li>
  <li>修订号：修复了一些bug，可以理解为合并了一个hotfix。</li>
</ul>

<h3 id="commit-message规范">commit message规范</h3>

<p>书写良好的commit message能大大提高代码维护的效率。但是在日常开发中由于缺少对于commit message的约束，导致填写内容随意、质量参差不齐，可读性低亦难以维护。在项目中引入commit message规范已是迫在眉睫。</p>

<p>现在市面上比较流行的方案是<code class="language-plaintext highlighter-rouge">约定式提交规范</code>（<code class="language-plaintext highlighter-rouge">Conventional Commits</code>），它受到了<code class="language-plaintext highlighter-rouge">Angular提交准则</code>的启发，并在很大程度上以其为依据。<code class="language-plaintext highlighter-rouge">约定式提交规范</code>是一种基于提交消息的轻量级约定。 它提供了一组用于创建清晰的提交历史的简单规则；这使得编写基于规范的自动化工具变得更容易。这个约定与<code class="language-plaintext highlighter-rouge">SemVer</code>相吻合，在提交信息中描述新特性、bug 修复和破坏性变更。它的 message 格式如下:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;类型&gt;[可选的作用域]: &lt;描述&gt;

[可选的正文]

[可选的脚注]
</code></pre></div></div>

<h4 id="commitizen--cz-conventional-changelog">commitizen &amp; cz-conventional-changelog</h4>

<p><code class="language-plaintext highlighter-rouge">commitizen</code>是一个撰写合格<code class="language-plaintext highlighter-rouge">commit message</code>的工具，用于代替<code class="language-plaintext highlighter-rouge">git commit</code> 指令，而<code class="language-plaintext highlighter-rouge">cz-conventional-changelog</code>适配器提供<a href="https://github.com/conventional-changelog/conventional-changelog">conventional-changelog</a>标准（约定式提交标准）。基于不同需求，也可以使用不同适配器。</p>

<ol>
  <li>
    <p>全局安装</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">-g</span> commitizen cz-conventional-changelog
<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'{ "path": "cz-conventional-changelog" }'</span> <span class="o">&gt;</span> ~/.czrc
</code></pre></div>    </div>

    <blockquote>
      <p>安装完毕后，可直接使用<code class="language-plaintext highlighter-rouge">git cz</code>来取代<code class="language-plaintext highlighter-rouge">git commit</code>。</p>

      <p>全局模式下，需要 <code class="language-plaintext highlighter-rouge">~/.czrc</code> 配置文件, 为<code class="language-plaintext highlighter-rouge">commitizen</code>指定<code class="language-plaintext highlighter-rouge">Adapter</code>。</p>
    </blockquote>
  </li>
  <li>
    <p>使用</p>

    <p>执行<code class="language-plaintext highlighter-rouge">git cz</code>进入interactive模式，根据提示依次填写</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.Select the type of change that you're committing 选择改动类型 (&lt;type&gt;)
   
2.What is the scope of this change (e.g. component or file name)? 填写改动范围 (&lt;scope&gt;)
   
3.Write a short, imperative tense description of the change: 写一个精简的描述 (&lt;subject&gt;)
   
4.Provide a longer description of the change: (press enter to skip) 对于改动写一段长描述 (&lt;body&gt;)
   
5.Are there any breaking changes? (y/n) 是破坏性修改吗？默认n (&lt;footer&gt;)
   
6.Does this change affect any openreve issues? (y/n) 改动修复了哪个问题？默认n (&lt;footer&gt;)
</code></pre></div>    </div>

    <blockquote>
      <p>任何<code class="language-plaintext highlighter-rouge">git commit</code>指令的<code class="language-plaintext highlighter-rouge">option</code>都能用在 <code class="language-plaintext highlighter-rouge">git cz</code>指令上, 例如<code class="language-plaintext highlighter-rouge">git cz -a</code></p>
    </blockquote>
  </li>
  <li>
    <p>示例</p>

    <p><img src="https://figure-b.ricardolsw.com/image/HBX2v2BNlNazN2QObUlrI2YF1tE3hxWW.jpg?x-oss-process=style/watermark" alt="image-20200702153009629" /></p>

    <p>相应的git log：</p>

    <p><img src="https://figure-b.ricardolsw.com/image/ig4eThMKog9vvOlP7U6ARhSUjqOBICsu.jpg?x-oss-process=style/watermark" alt="image-20200702153153045" /></p>
  </li>
</ol>]]></content><author><name>Ricardo</name></author><category term="工具" /><category term="git" /><summary type="html"><![CDATA[分支管理]]></summary></entry></feed>